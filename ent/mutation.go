// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/ent/audquote"
	"main/ent/chfquote"
	"main/ent/cnyquote"
	"main/ent/czkquote"
	"main/ent/euroquote"
	"main/ent/gbpquote"
	"main/ent/hkdquote"
	"main/ent/hufquote"
	"main/ent/inrquote"
	"main/ent/nokquote"
	"main/ent/nzdquote"
	"main/ent/pkrquote"
	"main/ent/plnquote"
	"main/ent/predicate"
	"main/ent/rubquote"
	"main/ent/sekquote"
	"main/ent/twdquote"
	"main/ent/uahquote"
	"main/ent/usdquote"
	"main/ent/zarquote"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAUDQuote  = "AUDQuote"
	TypeCHFQuote  = "CHFQuote"
	TypeCNYQuote  = "CNYQuote"
	TypeCZKQuote  = "CZKQuote"
	TypeEUROQuote = "EUROQuote"
	TypeGBPQuote  = "GBPQuote"
	TypeHKDQuote  = "HKDQuote"
	TypeHUFQuote  = "HUFQuote"
	TypeINRQuote  = "INRQuote"
	TypeNOKQuote  = "NOKQuote"
	TypeNZDQuote  = "NZDQuote"
	TypePKRQuote  = "PKRQuote"
	TypePLNQuote  = "PLNQuote"
	TypeRUBQuote  = "RUBQuote"
	TypeSEKQuote  = "SEKQuote"
	TypeTWDQuote  = "TWDQuote"
	TypeUAHQuote  = "UAHQuote"
	TypeUSDQuote  = "USDQuote"
	TypeZARQuote  = "ZARQuote"
)

// AUDQuoteMutation represents an operation that mutates the AUDQuote nodes in the graph.
type AUDQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AUDQuote, error)
	predicates    []predicate.AUDQuote
}

var _ ent.Mutation = (*AUDQuoteMutation)(nil)

// audquoteOption allows management of the mutation configuration using functional options.
type audquoteOption func(*AUDQuoteMutation)

// newAUDQuoteMutation creates new mutation for the AUDQuote entity.
func newAUDQuoteMutation(c config, op Op, opts ...audquoteOption) *AUDQuoteMutation {
	m := &AUDQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeAUDQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAUDQuoteID sets the ID field of the mutation.
func withAUDQuoteID(id int) audquoteOption {
	return func(m *AUDQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *AUDQuote
		)
		m.oldValue = func(ctx context.Context) (*AUDQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AUDQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAUDQuote sets the old AUDQuote of the mutation.
func withAUDQuote(node *AUDQuote) audquoteOption {
	return func(m *AUDQuoteMutation) {
		m.oldValue = func(context.Context) (*AUDQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AUDQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AUDQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AUDQuote entities.
func (m *AUDQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AUDQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AUDQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AUDQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *AUDQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *AUDQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the AUDQuote entity.
// If the AUDQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AUDQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *AUDQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *AUDQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *AUDQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *AUDQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *AUDQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the AUDQuote entity.
// If the AUDQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AUDQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *AUDQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the AUDQuoteMutation builder.
func (m *AUDQuoteMutation) Where(ps ...predicate.AUDQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AUDQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AUDQuote).
func (m *AUDQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AUDQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, audquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, audquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AUDQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case audquote.FieldPrice:
		return m.Price()
	case audquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AUDQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case audquote.FieldPrice:
		return m.OldPrice(ctx)
	case audquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown AUDQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AUDQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case audquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case audquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown AUDQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AUDQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, audquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AUDQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case audquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AUDQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case audquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown AUDQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AUDQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AUDQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AUDQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AUDQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AUDQuoteMutation) ResetField(name string) error {
	switch name {
	case audquote.FieldPrice:
		m.ResetPrice()
		return nil
	case audquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown AUDQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AUDQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AUDQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AUDQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AUDQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AUDQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AUDQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AUDQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AUDQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AUDQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AUDQuote edge %s", name)
}

// CHFQuoteMutation represents an operation that mutates the CHFQuote nodes in the graph.
type CHFQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CHFQuote, error)
	predicates    []predicate.CHFQuote
}

var _ ent.Mutation = (*CHFQuoteMutation)(nil)

// chfquoteOption allows management of the mutation configuration using functional options.
type chfquoteOption func(*CHFQuoteMutation)

// newCHFQuoteMutation creates new mutation for the CHFQuote entity.
func newCHFQuoteMutation(c config, op Op, opts ...chfquoteOption) *CHFQuoteMutation {
	m := &CHFQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeCHFQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCHFQuoteID sets the ID field of the mutation.
func withCHFQuoteID(id int) chfquoteOption {
	return func(m *CHFQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *CHFQuote
		)
		m.oldValue = func(ctx context.Context) (*CHFQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CHFQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCHFQuote sets the old CHFQuote of the mutation.
func withCHFQuote(node *CHFQuote) chfquoteOption {
	return func(m *CHFQuoteMutation) {
		m.oldValue = func(context.Context) (*CHFQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CHFQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CHFQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CHFQuote entities.
func (m *CHFQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CHFQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CHFQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CHFQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *CHFQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *CHFQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the CHFQuote entity.
// If the CHFQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CHFQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *CHFQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *CHFQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *CHFQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *CHFQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *CHFQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the CHFQuote entity.
// If the CHFQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CHFQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *CHFQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the CHFQuoteMutation builder.
func (m *CHFQuoteMutation) Where(ps ...predicate.CHFQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CHFQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CHFQuote).
func (m *CHFQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CHFQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, chfquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, chfquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CHFQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chfquote.FieldPrice:
		return m.Price()
	case chfquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CHFQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chfquote.FieldPrice:
		return m.OldPrice(ctx)
	case chfquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown CHFQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CHFQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chfquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case chfquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown CHFQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CHFQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, chfquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CHFQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case chfquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CHFQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case chfquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown CHFQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CHFQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CHFQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CHFQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CHFQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CHFQuoteMutation) ResetField(name string) error {
	switch name {
	case chfquote.FieldPrice:
		m.ResetPrice()
		return nil
	case chfquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown CHFQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CHFQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CHFQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CHFQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CHFQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CHFQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CHFQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CHFQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CHFQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CHFQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CHFQuote edge %s", name)
}

// CNYQuoteMutation represents an operation that mutates the CNYQuote nodes in the graph.
type CNYQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CNYQuote, error)
	predicates    []predicate.CNYQuote
}

var _ ent.Mutation = (*CNYQuoteMutation)(nil)

// cnyquoteOption allows management of the mutation configuration using functional options.
type cnyquoteOption func(*CNYQuoteMutation)

// newCNYQuoteMutation creates new mutation for the CNYQuote entity.
func newCNYQuoteMutation(c config, op Op, opts ...cnyquoteOption) *CNYQuoteMutation {
	m := &CNYQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeCNYQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCNYQuoteID sets the ID field of the mutation.
func withCNYQuoteID(id int) cnyquoteOption {
	return func(m *CNYQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *CNYQuote
		)
		m.oldValue = func(ctx context.Context) (*CNYQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CNYQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCNYQuote sets the old CNYQuote of the mutation.
func withCNYQuote(node *CNYQuote) cnyquoteOption {
	return func(m *CNYQuoteMutation) {
		m.oldValue = func(context.Context) (*CNYQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CNYQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CNYQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CNYQuote entities.
func (m *CNYQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CNYQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CNYQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CNYQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *CNYQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *CNYQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the CNYQuote entity.
// If the CNYQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CNYQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *CNYQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *CNYQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *CNYQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *CNYQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *CNYQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the CNYQuote entity.
// If the CNYQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CNYQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *CNYQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the CNYQuoteMutation builder.
func (m *CNYQuoteMutation) Where(ps ...predicate.CNYQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CNYQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CNYQuote).
func (m *CNYQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CNYQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, cnyquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, cnyquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CNYQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cnyquote.FieldPrice:
		return m.Price()
	case cnyquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CNYQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cnyquote.FieldPrice:
		return m.OldPrice(ctx)
	case cnyquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown CNYQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CNYQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cnyquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case cnyquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown CNYQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CNYQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, cnyquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CNYQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cnyquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CNYQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cnyquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown CNYQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CNYQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CNYQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CNYQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CNYQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CNYQuoteMutation) ResetField(name string) error {
	switch name {
	case cnyquote.FieldPrice:
		m.ResetPrice()
		return nil
	case cnyquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown CNYQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CNYQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CNYQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CNYQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CNYQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CNYQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CNYQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CNYQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CNYQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CNYQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CNYQuote edge %s", name)
}

// CZKQuoteMutation represents an operation that mutates the CZKQuote nodes in the graph.
type CZKQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CZKQuote, error)
	predicates    []predicate.CZKQuote
}

var _ ent.Mutation = (*CZKQuoteMutation)(nil)

// czkquoteOption allows management of the mutation configuration using functional options.
type czkquoteOption func(*CZKQuoteMutation)

// newCZKQuoteMutation creates new mutation for the CZKQuote entity.
func newCZKQuoteMutation(c config, op Op, opts ...czkquoteOption) *CZKQuoteMutation {
	m := &CZKQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeCZKQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCZKQuoteID sets the ID field of the mutation.
func withCZKQuoteID(id int) czkquoteOption {
	return func(m *CZKQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *CZKQuote
		)
		m.oldValue = func(ctx context.Context) (*CZKQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CZKQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCZKQuote sets the old CZKQuote of the mutation.
func withCZKQuote(node *CZKQuote) czkquoteOption {
	return func(m *CZKQuoteMutation) {
		m.oldValue = func(context.Context) (*CZKQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CZKQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CZKQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CZKQuote entities.
func (m *CZKQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CZKQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CZKQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CZKQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *CZKQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *CZKQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the CZKQuote entity.
// If the CZKQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CZKQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *CZKQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *CZKQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *CZKQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *CZKQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *CZKQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the CZKQuote entity.
// If the CZKQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CZKQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *CZKQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the CZKQuoteMutation builder.
func (m *CZKQuoteMutation) Where(ps ...predicate.CZKQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CZKQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CZKQuote).
func (m *CZKQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CZKQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, czkquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, czkquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CZKQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case czkquote.FieldPrice:
		return m.Price()
	case czkquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CZKQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case czkquote.FieldPrice:
		return m.OldPrice(ctx)
	case czkquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown CZKQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CZKQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case czkquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case czkquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown CZKQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CZKQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, czkquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CZKQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case czkquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CZKQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case czkquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown CZKQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CZKQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CZKQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CZKQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CZKQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CZKQuoteMutation) ResetField(name string) error {
	switch name {
	case czkquote.FieldPrice:
		m.ResetPrice()
		return nil
	case czkquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown CZKQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CZKQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CZKQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CZKQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CZKQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CZKQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CZKQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CZKQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CZKQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CZKQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CZKQuote edge %s", name)
}

// EUROQuoteMutation represents an operation that mutates the EUROQuote nodes in the graph.
type EUROQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*EUROQuote, error)
	predicates    []predicate.EUROQuote
}

var _ ent.Mutation = (*EUROQuoteMutation)(nil)

// euroquoteOption allows management of the mutation configuration using functional options.
type euroquoteOption func(*EUROQuoteMutation)

// newEUROQuoteMutation creates new mutation for the EUROQuote entity.
func newEUROQuoteMutation(c config, op Op, opts ...euroquoteOption) *EUROQuoteMutation {
	m := &EUROQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeEUROQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEUROQuoteID sets the ID field of the mutation.
func withEUROQuoteID(id int) euroquoteOption {
	return func(m *EUROQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *EUROQuote
		)
		m.oldValue = func(ctx context.Context) (*EUROQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EUROQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEUROQuote sets the old EUROQuote of the mutation.
func withEUROQuote(node *EUROQuote) euroquoteOption {
	return func(m *EUROQuoteMutation) {
		m.oldValue = func(context.Context) (*EUROQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EUROQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EUROQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EUROQuote entities.
func (m *EUROQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EUROQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EUROQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EUROQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *EUROQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *EUROQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the EUROQuote entity.
// If the EUROQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EUROQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *EUROQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *EUROQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *EUROQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *EUROQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *EUROQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the EUROQuote entity.
// If the EUROQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EUROQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *EUROQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the EUROQuoteMutation builder.
func (m *EUROQuoteMutation) Where(ps ...predicate.EUROQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EUROQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (EUROQuote).
func (m *EUROQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EUROQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, euroquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, euroquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EUROQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case euroquote.FieldPrice:
		return m.Price()
	case euroquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EUROQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case euroquote.FieldPrice:
		return m.OldPrice(ctx)
	case euroquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown EUROQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EUROQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case euroquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case euroquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown EUROQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EUROQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, euroquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EUROQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case euroquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EUROQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case euroquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown EUROQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EUROQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EUROQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EUROQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EUROQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EUROQuoteMutation) ResetField(name string) error {
	switch name {
	case euroquote.FieldPrice:
		m.ResetPrice()
		return nil
	case euroquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown EUROQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EUROQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EUROQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EUROQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EUROQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EUROQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EUROQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EUROQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EUROQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EUROQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EUROQuote edge %s", name)
}

// GBPQuoteMutation represents an operation that mutates the GBPQuote nodes in the graph.
type GBPQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*GBPQuote, error)
	predicates    []predicate.GBPQuote
}

var _ ent.Mutation = (*GBPQuoteMutation)(nil)

// gbpquoteOption allows management of the mutation configuration using functional options.
type gbpquoteOption func(*GBPQuoteMutation)

// newGBPQuoteMutation creates new mutation for the GBPQuote entity.
func newGBPQuoteMutation(c config, op Op, opts ...gbpquoteOption) *GBPQuoteMutation {
	m := &GBPQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeGBPQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGBPQuoteID sets the ID field of the mutation.
func withGBPQuoteID(id int) gbpquoteOption {
	return func(m *GBPQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *GBPQuote
		)
		m.oldValue = func(ctx context.Context) (*GBPQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GBPQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGBPQuote sets the old GBPQuote of the mutation.
func withGBPQuote(node *GBPQuote) gbpquoteOption {
	return func(m *GBPQuoteMutation) {
		m.oldValue = func(context.Context) (*GBPQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GBPQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GBPQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GBPQuote entities.
func (m *GBPQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GBPQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GBPQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GBPQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *GBPQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *GBPQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the GBPQuote entity.
// If the GBPQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GBPQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *GBPQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *GBPQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *GBPQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *GBPQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *GBPQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the GBPQuote entity.
// If the GBPQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GBPQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *GBPQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the GBPQuoteMutation builder.
func (m *GBPQuoteMutation) Where(ps ...predicate.GBPQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GBPQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GBPQuote).
func (m *GBPQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GBPQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, gbpquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, gbpquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GBPQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gbpquote.FieldPrice:
		return m.Price()
	case gbpquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GBPQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gbpquote.FieldPrice:
		return m.OldPrice(ctx)
	case gbpquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown GBPQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GBPQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gbpquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case gbpquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown GBPQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GBPQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, gbpquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GBPQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case gbpquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GBPQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case gbpquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown GBPQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GBPQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GBPQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GBPQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GBPQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GBPQuoteMutation) ResetField(name string) error {
	switch name {
	case gbpquote.FieldPrice:
		m.ResetPrice()
		return nil
	case gbpquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown GBPQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GBPQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GBPQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GBPQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GBPQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GBPQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GBPQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GBPQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GBPQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GBPQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GBPQuote edge %s", name)
}

// HKDQuoteMutation represents an operation that mutates the HKDQuote nodes in the graph.
type HKDQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*HKDQuote, error)
	predicates    []predicate.HKDQuote
}

var _ ent.Mutation = (*HKDQuoteMutation)(nil)

// hkdquoteOption allows management of the mutation configuration using functional options.
type hkdquoteOption func(*HKDQuoteMutation)

// newHKDQuoteMutation creates new mutation for the HKDQuote entity.
func newHKDQuoteMutation(c config, op Op, opts ...hkdquoteOption) *HKDQuoteMutation {
	m := &HKDQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeHKDQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHKDQuoteID sets the ID field of the mutation.
func withHKDQuoteID(id int) hkdquoteOption {
	return func(m *HKDQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *HKDQuote
		)
		m.oldValue = func(ctx context.Context) (*HKDQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HKDQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHKDQuote sets the old HKDQuote of the mutation.
func withHKDQuote(node *HKDQuote) hkdquoteOption {
	return func(m *HKDQuoteMutation) {
		m.oldValue = func(context.Context) (*HKDQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HKDQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HKDQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of HKDQuote entities.
func (m *HKDQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HKDQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HKDQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HKDQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *HKDQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *HKDQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the HKDQuote entity.
// If the HKDQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HKDQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *HKDQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *HKDQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *HKDQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *HKDQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *HKDQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the HKDQuote entity.
// If the HKDQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HKDQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *HKDQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the HKDQuoteMutation builder.
func (m *HKDQuoteMutation) Where(ps ...predicate.HKDQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *HKDQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (HKDQuote).
func (m *HKDQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HKDQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, hkdquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, hkdquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HKDQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hkdquote.FieldPrice:
		return m.Price()
	case hkdquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HKDQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hkdquote.FieldPrice:
		return m.OldPrice(ctx)
	case hkdquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown HKDQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HKDQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hkdquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case hkdquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown HKDQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HKDQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, hkdquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HKDQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case hkdquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HKDQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case hkdquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown HKDQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HKDQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HKDQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HKDQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown HKDQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HKDQuoteMutation) ResetField(name string) error {
	switch name {
	case hkdquote.FieldPrice:
		m.ResetPrice()
		return nil
	case hkdquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown HKDQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HKDQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HKDQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HKDQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HKDQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HKDQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HKDQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HKDQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown HKDQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HKDQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown HKDQuote edge %s", name)
}

// HUFQuoteMutation represents an operation that mutates the HUFQuote nodes in the graph.
type HUFQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*HUFQuote, error)
	predicates    []predicate.HUFQuote
}

var _ ent.Mutation = (*HUFQuoteMutation)(nil)

// hufquoteOption allows management of the mutation configuration using functional options.
type hufquoteOption func(*HUFQuoteMutation)

// newHUFQuoteMutation creates new mutation for the HUFQuote entity.
func newHUFQuoteMutation(c config, op Op, opts ...hufquoteOption) *HUFQuoteMutation {
	m := &HUFQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeHUFQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHUFQuoteID sets the ID field of the mutation.
func withHUFQuoteID(id int) hufquoteOption {
	return func(m *HUFQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *HUFQuote
		)
		m.oldValue = func(ctx context.Context) (*HUFQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HUFQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHUFQuote sets the old HUFQuote of the mutation.
func withHUFQuote(node *HUFQuote) hufquoteOption {
	return func(m *HUFQuoteMutation) {
		m.oldValue = func(context.Context) (*HUFQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HUFQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HUFQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of HUFQuote entities.
func (m *HUFQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HUFQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HUFQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HUFQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *HUFQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *HUFQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the HUFQuote entity.
// If the HUFQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HUFQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *HUFQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *HUFQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *HUFQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *HUFQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *HUFQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the HUFQuote entity.
// If the HUFQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HUFQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *HUFQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the HUFQuoteMutation builder.
func (m *HUFQuoteMutation) Where(ps ...predicate.HUFQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *HUFQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (HUFQuote).
func (m *HUFQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HUFQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, hufquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, hufquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HUFQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hufquote.FieldPrice:
		return m.Price()
	case hufquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HUFQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hufquote.FieldPrice:
		return m.OldPrice(ctx)
	case hufquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown HUFQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HUFQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hufquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case hufquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown HUFQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HUFQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, hufquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HUFQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case hufquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HUFQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case hufquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown HUFQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HUFQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HUFQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HUFQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown HUFQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HUFQuoteMutation) ResetField(name string) error {
	switch name {
	case hufquote.FieldPrice:
		m.ResetPrice()
		return nil
	case hufquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown HUFQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HUFQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HUFQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HUFQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HUFQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HUFQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HUFQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HUFQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown HUFQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HUFQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown HUFQuote edge %s", name)
}

// INRQuoteMutation represents an operation that mutates the INRQuote nodes in the graph.
type INRQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*INRQuote, error)
	predicates    []predicate.INRQuote
}

var _ ent.Mutation = (*INRQuoteMutation)(nil)

// inrquoteOption allows management of the mutation configuration using functional options.
type inrquoteOption func(*INRQuoteMutation)

// newINRQuoteMutation creates new mutation for the INRQuote entity.
func newINRQuoteMutation(c config, op Op, opts ...inrquoteOption) *INRQuoteMutation {
	m := &INRQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeINRQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withINRQuoteID sets the ID field of the mutation.
func withINRQuoteID(id int) inrquoteOption {
	return func(m *INRQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *INRQuote
		)
		m.oldValue = func(ctx context.Context) (*INRQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().INRQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withINRQuote sets the old INRQuote of the mutation.
func withINRQuote(node *INRQuote) inrquoteOption {
	return func(m *INRQuoteMutation) {
		m.oldValue = func(context.Context) (*INRQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m INRQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m INRQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of INRQuote entities.
func (m *INRQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *INRQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *INRQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().INRQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *INRQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *INRQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the INRQuote entity.
// If the INRQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *INRQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *INRQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *INRQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *INRQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *INRQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *INRQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the INRQuote entity.
// If the INRQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *INRQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *INRQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the INRQuoteMutation builder.
func (m *INRQuoteMutation) Where(ps ...predicate.INRQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *INRQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (INRQuote).
func (m *INRQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *INRQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, inrquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, inrquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *INRQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case inrquote.FieldPrice:
		return m.Price()
	case inrquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *INRQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case inrquote.FieldPrice:
		return m.OldPrice(ctx)
	case inrquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown INRQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *INRQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case inrquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case inrquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown INRQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *INRQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, inrquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *INRQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case inrquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *INRQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case inrquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown INRQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *INRQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *INRQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *INRQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown INRQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *INRQuoteMutation) ResetField(name string) error {
	switch name {
	case inrquote.FieldPrice:
		m.ResetPrice()
		return nil
	case inrquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown INRQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *INRQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *INRQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *INRQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *INRQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *INRQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *INRQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *INRQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown INRQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *INRQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown INRQuote edge %s", name)
}

// NOKQuoteMutation represents an operation that mutates the NOKQuote nodes in the graph.
type NOKQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*NOKQuote, error)
	predicates    []predicate.NOKQuote
}

var _ ent.Mutation = (*NOKQuoteMutation)(nil)

// nokquoteOption allows management of the mutation configuration using functional options.
type nokquoteOption func(*NOKQuoteMutation)

// newNOKQuoteMutation creates new mutation for the NOKQuote entity.
func newNOKQuoteMutation(c config, op Op, opts ...nokquoteOption) *NOKQuoteMutation {
	m := &NOKQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeNOKQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNOKQuoteID sets the ID field of the mutation.
func withNOKQuoteID(id int) nokquoteOption {
	return func(m *NOKQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *NOKQuote
		)
		m.oldValue = func(ctx context.Context) (*NOKQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NOKQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNOKQuote sets the old NOKQuote of the mutation.
func withNOKQuote(node *NOKQuote) nokquoteOption {
	return func(m *NOKQuoteMutation) {
		m.oldValue = func(context.Context) (*NOKQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NOKQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NOKQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of NOKQuote entities.
func (m *NOKQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NOKQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NOKQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NOKQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *NOKQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *NOKQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the NOKQuote entity.
// If the NOKQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NOKQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *NOKQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *NOKQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *NOKQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *NOKQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *NOKQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the NOKQuote entity.
// If the NOKQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NOKQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *NOKQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the NOKQuoteMutation builder.
func (m *NOKQuoteMutation) Where(ps ...predicate.NOKQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NOKQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (NOKQuote).
func (m *NOKQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NOKQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, nokquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, nokquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NOKQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nokquote.FieldPrice:
		return m.Price()
	case nokquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NOKQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nokquote.FieldPrice:
		return m.OldPrice(ctx)
	case nokquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown NOKQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NOKQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nokquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case nokquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown NOKQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NOKQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, nokquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NOKQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case nokquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NOKQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case nokquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown NOKQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NOKQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NOKQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NOKQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NOKQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NOKQuoteMutation) ResetField(name string) error {
	switch name {
	case nokquote.FieldPrice:
		m.ResetPrice()
		return nil
	case nokquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown NOKQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NOKQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NOKQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NOKQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NOKQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NOKQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NOKQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NOKQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown NOKQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NOKQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown NOKQuote edge %s", name)
}

// NZDQuoteMutation represents an operation that mutates the NZDQuote nodes in the graph.
type NZDQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*NZDQuote, error)
	predicates    []predicate.NZDQuote
}

var _ ent.Mutation = (*NZDQuoteMutation)(nil)

// nzdquoteOption allows management of the mutation configuration using functional options.
type nzdquoteOption func(*NZDQuoteMutation)

// newNZDQuoteMutation creates new mutation for the NZDQuote entity.
func newNZDQuoteMutation(c config, op Op, opts ...nzdquoteOption) *NZDQuoteMutation {
	m := &NZDQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeNZDQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNZDQuoteID sets the ID field of the mutation.
func withNZDQuoteID(id int) nzdquoteOption {
	return func(m *NZDQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *NZDQuote
		)
		m.oldValue = func(ctx context.Context) (*NZDQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NZDQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNZDQuote sets the old NZDQuote of the mutation.
func withNZDQuote(node *NZDQuote) nzdquoteOption {
	return func(m *NZDQuoteMutation) {
		m.oldValue = func(context.Context) (*NZDQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NZDQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NZDQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of NZDQuote entities.
func (m *NZDQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NZDQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NZDQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NZDQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *NZDQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *NZDQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the NZDQuote entity.
// If the NZDQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NZDQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *NZDQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *NZDQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *NZDQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *NZDQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *NZDQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the NZDQuote entity.
// If the NZDQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NZDQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *NZDQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the NZDQuoteMutation builder.
func (m *NZDQuoteMutation) Where(ps ...predicate.NZDQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NZDQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (NZDQuote).
func (m *NZDQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NZDQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, nzdquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, nzdquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NZDQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nzdquote.FieldPrice:
		return m.Price()
	case nzdquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NZDQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nzdquote.FieldPrice:
		return m.OldPrice(ctx)
	case nzdquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown NZDQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NZDQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nzdquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case nzdquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown NZDQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NZDQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, nzdquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NZDQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case nzdquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NZDQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case nzdquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown NZDQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NZDQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NZDQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NZDQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NZDQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NZDQuoteMutation) ResetField(name string) error {
	switch name {
	case nzdquote.FieldPrice:
		m.ResetPrice()
		return nil
	case nzdquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown NZDQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NZDQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NZDQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NZDQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NZDQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NZDQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NZDQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NZDQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown NZDQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NZDQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown NZDQuote edge %s", name)
}

// PKRQuoteMutation represents an operation that mutates the PKRQuote nodes in the graph.
type PKRQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*PKRQuote, error)
	predicates    []predicate.PKRQuote
}

var _ ent.Mutation = (*PKRQuoteMutation)(nil)

// pkrquoteOption allows management of the mutation configuration using functional options.
type pkrquoteOption func(*PKRQuoteMutation)

// newPKRQuoteMutation creates new mutation for the PKRQuote entity.
func newPKRQuoteMutation(c config, op Op, opts ...pkrquoteOption) *PKRQuoteMutation {
	m := &PKRQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypePKRQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPKRQuoteID sets the ID field of the mutation.
func withPKRQuoteID(id int) pkrquoteOption {
	return func(m *PKRQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *PKRQuote
		)
		m.oldValue = func(ctx context.Context) (*PKRQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PKRQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPKRQuote sets the old PKRQuote of the mutation.
func withPKRQuote(node *PKRQuote) pkrquoteOption {
	return func(m *PKRQuoteMutation) {
		m.oldValue = func(context.Context) (*PKRQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PKRQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PKRQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PKRQuote entities.
func (m *PKRQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PKRQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PKRQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PKRQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *PKRQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *PKRQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the PKRQuote entity.
// If the PKRQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PKRQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *PKRQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *PKRQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *PKRQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *PKRQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *PKRQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the PKRQuote entity.
// If the PKRQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PKRQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *PKRQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the PKRQuoteMutation builder.
func (m *PKRQuoteMutation) Where(ps ...predicate.PKRQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PKRQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PKRQuote).
func (m *PKRQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PKRQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, pkrquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, pkrquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PKRQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pkrquote.FieldPrice:
		return m.Price()
	case pkrquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PKRQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pkrquote.FieldPrice:
		return m.OldPrice(ctx)
	case pkrquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown PKRQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PKRQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pkrquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case pkrquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown PKRQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PKRQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, pkrquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PKRQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case pkrquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PKRQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case pkrquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown PKRQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PKRQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PKRQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PKRQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PKRQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PKRQuoteMutation) ResetField(name string) error {
	switch name {
	case pkrquote.FieldPrice:
		m.ResetPrice()
		return nil
	case pkrquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown PKRQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PKRQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PKRQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PKRQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PKRQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PKRQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PKRQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PKRQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PKRQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PKRQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PKRQuote edge %s", name)
}

// PLNQuoteMutation represents an operation that mutates the PLNQuote nodes in the graph.
type PLNQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*PLNQuote, error)
	predicates    []predicate.PLNQuote
}

var _ ent.Mutation = (*PLNQuoteMutation)(nil)

// plnquoteOption allows management of the mutation configuration using functional options.
type plnquoteOption func(*PLNQuoteMutation)

// newPLNQuoteMutation creates new mutation for the PLNQuote entity.
func newPLNQuoteMutation(c config, op Op, opts ...plnquoteOption) *PLNQuoteMutation {
	m := &PLNQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypePLNQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPLNQuoteID sets the ID field of the mutation.
func withPLNQuoteID(id int) plnquoteOption {
	return func(m *PLNQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *PLNQuote
		)
		m.oldValue = func(ctx context.Context) (*PLNQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PLNQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPLNQuote sets the old PLNQuote of the mutation.
func withPLNQuote(node *PLNQuote) plnquoteOption {
	return func(m *PLNQuoteMutation) {
		m.oldValue = func(context.Context) (*PLNQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PLNQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PLNQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PLNQuote entities.
func (m *PLNQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PLNQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PLNQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PLNQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *PLNQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *PLNQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the PLNQuote entity.
// If the PLNQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PLNQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *PLNQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *PLNQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *PLNQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *PLNQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *PLNQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the PLNQuote entity.
// If the PLNQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PLNQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *PLNQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the PLNQuoteMutation builder.
func (m *PLNQuoteMutation) Where(ps ...predicate.PLNQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PLNQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PLNQuote).
func (m *PLNQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PLNQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, plnquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, plnquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PLNQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case plnquote.FieldPrice:
		return m.Price()
	case plnquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PLNQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case plnquote.FieldPrice:
		return m.OldPrice(ctx)
	case plnquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown PLNQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PLNQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case plnquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case plnquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown PLNQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PLNQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, plnquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PLNQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case plnquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PLNQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case plnquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown PLNQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PLNQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PLNQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PLNQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PLNQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PLNQuoteMutation) ResetField(name string) error {
	switch name {
	case plnquote.FieldPrice:
		m.ResetPrice()
		return nil
	case plnquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown PLNQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PLNQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PLNQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PLNQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PLNQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PLNQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PLNQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PLNQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PLNQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PLNQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PLNQuote edge %s", name)
}

// RUBQuoteMutation represents an operation that mutates the RUBQuote nodes in the graph.
type RUBQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*RUBQuote, error)
	predicates    []predicate.RUBQuote
}

var _ ent.Mutation = (*RUBQuoteMutation)(nil)

// rubquoteOption allows management of the mutation configuration using functional options.
type rubquoteOption func(*RUBQuoteMutation)

// newRUBQuoteMutation creates new mutation for the RUBQuote entity.
func newRUBQuoteMutation(c config, op Op, opts ...rubquoteOption) *RUBQuoteMutation {
	m := &RUBQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeRUBQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRUBQuoteID sets the ID field of the mutation.
func withRUBQuoteID(id int) rubquoteOption {
	return func(m *RUBQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *RUBQuote
		)
		m.oldValue = func(ctx context.Context) (*RUBQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RUBQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRUBQuote sets the old RUBQuote of the mutation.
func withRUBQuote(node *RUBQuote) rubquoteOption {
	return func(m *RUBQuoteMutation) {
		m.oldValue = func(context.Context) (*RUBQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RUBQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RUBQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RUBQuote entities.
func (m *RUBQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RUBQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RUBQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RUBQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *RUBQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *RUBQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the RUBQuote entity.
// If the RUBQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RUBQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *RUBQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *RUBQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *RUBQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *RUBQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *RUBQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the RUBQuote entity.
// If the RUBQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RUBQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *RUBQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the RUBQuoteMutation builder.
func (m *RUBQuoteMutation) Where(ps ...predicate.RUBQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RUBQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RUBQuote).
func (m *RUBQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RUBQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, rubquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, rubquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RUBQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rubquote.FieldPrice:
		return m.Price()
	case rubquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RUBQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rubquote.FieldPrice:
		return m.OldPrice(ctx)
	case rubquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown RUBQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RUBQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rubquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case rubquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown RUBQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RUBQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, rubquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RUBQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rubquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RUBQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rubquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown RUBQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RUBQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RUBQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RUBQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RUBQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RUBQuoteMutation) ResetField(name string) error {
	switch name {
	case rubquote.FieldPrice:
		m.ResetPrice()
		return nil
	case rubquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown RUBQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RUBQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RUBQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RUBQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RUBQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RUBQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RUBQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RUBQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RUBQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RUBQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RUBQuote edge %s", name)
}

// SEKQuoteMutation represents an operation that mutates the SEKQuote nodes in the graph.
type SEKQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SEKQuote, error)
	predicates    []predicate.SEKQuote
}

var _ ent.Mutation = (*SEKQuoteMutation)(nil)

// sekquoteOption allows management of the mutation configuration using functional options.
type sekquoteOption func(*SEKQuoteMutation)

// newSEKQuoteMutation creates new mutation for the SEKQuote entity.
func newSEKQuoteMutation(c config, op Op, opts ...sekquoteOption) *SEKQuoteMutation {
	m := &SEKQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeSEKQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSEKQuoteID sets the ID field of the mutation.
func withSEKQuoteID(id int) sekquoteOption {
	return func(m *SEKQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *SEKQuote
		)
		m.oldValue = func(ctx context.Context) (*SEKQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SEKQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSEKQuote sets the old SEKQuote of the mutation.
func withSEKQuote(node *SEKQuote) sekquoteOption {
	return func(m *SEKQuoteMutation) {
		m.oldValue = func(context.Context) (*SEKQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SEKQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SEKQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SEKQuote entities.
func (m *SEKQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SEKQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SEKQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SEKQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *SEKQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *SEKQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the SEKQuote entity.
// If the SEKQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SEKQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *SEKQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *SEKQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *SEKQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *SEKQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *SEKQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the SEKQuote entity.
// If the SEKQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SEKQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *SEKQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the SEKQuoteMutation builder.
func (m *SEKQuoteMutation) Where(ps ...predicate.SEKQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SEKQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SEKQuote).
func (m *SEKQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SEKQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, sekquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, sekquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SEKQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sekquote.FieldPrice:
		return m.Price()
	case sekquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SEKQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sekquote.FieldPrice:
		return m.OldPrice(ctx)
	case sekquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown SEKQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SEKQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sekquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case sekquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown SEKQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SEKQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, sekquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SEKQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sekquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SEKQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sekquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown SEKQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SEKQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SEKQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SEKQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SEKQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SEKQuoteMutation) ResetField(name string) error {
	switch name {
	case sekquote.FieldPrice:
		m.ResetPrice()
		return nil
	case sekquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown SEKQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SEKQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SEKQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SEKQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SEKQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SEKQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SEKQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SEKQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SEKQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SEKQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SEKQuote edge %s", name)
}

// TWDQuoteMutation represents an operation that mutates the TWDQuote nodes in the graph.
type TWDQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TWDQuote, error)
	predicates    []predicate.TWDQuote
}

var _ ent.Mutation = (*TWDQuoteMutation)(nil)

// twdquoteOption allows management of the mutation configuration using functional options.
type twdquoteOption func(*TWDQuoteMutation)

// newTWDQuoteMutation creates new mutation for the TWDQuote entity.
func newTWDQuoteMutation(c config, op Op, opts ...twdquoteOption) *TWDQuoteMutation {
	m := &TWDQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeTWDQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTWDQuoteID sets the ID field of the mutation.
func withTWDQuoteID(id int) twdquoteOption {
	return func(m *TWDQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *TWDQuote
		)
		m.oldValue = func(ctx context.Context) (*TWDQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TWDQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTWDQuote sets the old TWDQuote of the mutation.
func withTWDQuote(node *TWDQuote) twdquoteOption {
	return func(m *TWDQuoteMutation) {
		m.oldValue = func(context.Context) (*TWDQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TWDQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TWDQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TWDQuote entities.
func (m *TWDQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TWDQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TWDQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TWDQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *TWDQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *TWDQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the TWDQuote entity.
// If the TWDQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TWDQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *TWDQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *TWDQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *TWDQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *TWDQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *TWDQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the TWDQuote entity.
// If the TWDQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TWDQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *TWDQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the TWDQuoteMutation builder.
func (m *TWDQuoteMutation) Where(ps ...predicate.TWDQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TWDQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TWDQuote).
func (m *TWDQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TWDQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, twdquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, twdquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TWDQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case twdquote.FieldPrice:
		return m.Price()
	case twdquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TWDQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case twdquote.FieldPrice:
		return m.OldPrice(ctx)
	case twdquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown TWDQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TWDQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case twdquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case twdquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown TWDQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TWDQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, twdquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TWDQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case twdquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TWDQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case twdquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown TWDQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TWDQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TWDQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TWDQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TWDQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TWDQuoteMutation) ResetField(name string) error {
	switch name {
	case twdquote.FieldPrice:
		m.ResetPrice()
		return nil
	case twdquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown TWDQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TWDQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TWDQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TWDQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TWDQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TWDQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TWDQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TWDQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TWDQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TWDQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TWDQuote edge %s", name)
}

// UAHQuoteMutation represents an operation that mutates the UAHQuote nodes in the graph.
type UAHQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UAHQuote, error)
	predicates    []predicate.UAHQuote
}

var _ ent.Mutation = (*UAHQuoteMutation)(nil)

// uahquoteOption allows management of the mutation configuration using functional options.
type uahquoteOption func(*UAHQuoteMutation)

// newUAHQuoteMutation creates new mutation for the UAHQuote entity.
func newUAHQuoteMutation(c config, op Op, opts ...uahquoteOption) *UAHQuoteMutation {
	m := &UAHQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeUAHQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUAHQuoteID sets the ID field of the mutation.
func withUAHQuoteID(id int) uahquoteOption {
	return func(m *UAHQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *UAHQuote
		)
		m.oldValue = func(ctx context.Context) (*UAHQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UAHQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUAHQuote sets the old UAHQuote of the mutation.
func withUAHQuote(node *UAHQuote) uahquoteOption {
	return func(m *UAHQuoteMutation) {
		m.oldValue = func(context.Context) (*UAHQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UAHQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UAHQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UAHQuote entities.
func (m *UAHQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UAHQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UAHQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UAHQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *UAHQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *UAHQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the UAHQuote entity.
// If the UAHQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UAHQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *UAHQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *UAHQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *UAHQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *UAHQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *UAHQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the UAHQuote entity.
// If the UAHQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UAHQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *UAHQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the UAHQuoteMutation builder.
func (m *UAHQuoteMutation) Where(ps ...predicate.UAHQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UAHQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UAHQuote).
func (m *UAHQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UAHQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, uahquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, uahquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UAHQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uahquote.FieldPrice:
		return m.Price()
	case uahquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UAHQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uahquote.FieldPrice:
		return m.OldPrice(ctx)
	case uahquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown UAHQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UAHQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uahquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case uahquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown UAHQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UAHQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, uahquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UAHQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case uahquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UAHQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case uahquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown UAHQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UAHQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UAHQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UAHQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UAHQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UAHQuoteMutation) ResetField(name string) error {
	switch name {
	case uahquote.FieldPrice:
		m.ResetPrice()
		return nil
	case uahquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown UAHQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UAHQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UAHQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UAHQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UAHQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UAHQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UAHQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UAHQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UAHQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UAHQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UAHQuote edge %s", name)
}

// USDQuoteMutation represents an operation that mutates the USDQuote nodes in the graph.
type USDQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*USDQuote, error)
	predicates    []predicate.USDQuote
}

var _ ent.Mutation = (*USDQuoteMutation)(nil)

// usdquoteOption allows management of the mutation configuration using functional options.
type usdquoteOption func(*USDQuoteMutation)

// newUSDQuoteMutation creates new mutation for the USDQuote entity.
func newUSDQuoteMutation(c config, op Op, opts ...usdquoteOption) *USDQuoteMutation {
	m := &USDQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeUSDQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUSDQuoteID sets the ID field of the mutation.
func withUSDQuoteID(id int) usdquoteOption {
	return func(m *USDQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *USDQuote
		)
		m.oldValue = func(ctx context.Context) (*USDQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().USDQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUSDQuote sets the old USDQuote of the mutation.
func withUSDQuote(node *USDQuote) usdquoteOption {
	return func(m *USDQuoteMutation) {
		m.oldValue = func(context.Context) (*USDQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m USDQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m USDQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of USDQuote entities.
func (m *USDQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *USDQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *USDQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().USDQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *USDQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *USDQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the USDQuote entity.
// If the USDQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *USDQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *USDQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *USDQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *USDQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *USDQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *USDQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the USDQuote entity.
// If the USDQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *USDQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *USDQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the USDQuoteMutation builder.
func (m *USDQuoteMutation) Where(ps ...predicate.USDQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *USDQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (USDQuote).
func (m *USDQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *USDQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, usdquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, usdquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *USDQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usdquote.FieldPrice:
		return m.Price()
	case usdquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *USDQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usdquote.FieldPrice:
		return m.OldPrice(ctx)
	case usdquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown USDQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *USDQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usdquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case usdquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown USDQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *USDQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, usdquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *USDQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case usdquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *USDQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case usdquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown USDQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *USDQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *USDQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *USDQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown USDQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *USDQuoteMutation) ResetField(name string) error {
	switch name {
	case usdquote.FieldPrice:
		m.ResetPrice()
		return nil
	case usdquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown USDQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *USDQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *USDQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *USDQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *USDQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *USDQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *USDQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *USDQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown USDQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *USDQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown USDQuote edge %s", name)
}

// ZARQuoteMutation represents an operation that mutates the ZARQuote nodes in the graph.
type ZARQuoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	price         *float64
	addprice      *float64
	_Timestamp    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ZARQuote, error)
	predicates    []predicate.ZARQuote
}

var _ ent.Mutation = (*ZARQuoteMutation)(nil)

// zarquoteOption allows management of the mutation configuration using functional options.
type zarquoteOption func(*ZARQuoteMutation)

// newZARQuoteMutation creates new mutation for the ZARQuote entity.
func newZARQuoteMutation(c config, op Op, opts ...zarquoteOption) *ZARQuoteMutation {
	m := &ZARQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeZARQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withZARQuoteID sets the ID field of the mutation.
func withZARQuoteID(id int) zarquoteOption {
	return func(m *ZARQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *ZARQuote
		)
		m.oldValue = func(ctx context.Context) (*ZARQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ZARQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withZARQuote sets the old ZARQuote of the mutation.
func withZARQuote(node *ZARQuote) zarquoteOption {
	return func(m *ZARQuoteMutation) {
		m.oldValue = func(context.Context) (*ZARQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ZARQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ZARQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ZARQuote entities.
func (m *ZARQuoteMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ZARQuoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ZARQuoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ZARQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrice sets the "price" field.
func (m *ZARQuoteMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *ZARQuoteMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the ZARQuote entity.
// If the ZARQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ZARQuoteMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *ZARQuoteMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *ZARQuoteMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *ZARQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetTimestamp sets the "Timestamp" field.
func (m *ZARQuoteMutation) SetTimestamp(t time.Time) {
	m._Timestamp = &t
}

// Timestamp returns the value of the "Timestamp" field in the mutation.
func (m *ZARQuoteMutation) Timestamp() (r time.Time, exists bool) {
	v := m._Timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "Timestamp" field's value of the ZARQuote entity.
// If the ZARQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ZARQuoteMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "Timestamp" field.
func (m *ZARQuoteMutation) ResetTimestamp() {
	m._Timestamp = nil
}

// Where appends a list predicates to the ZARQuoteMutation builder.
func (m *ZARQuoteMutation) Where(ps ...predicate.ZARQuote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ZARQuoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ZARQuote).
func (m *ZARQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ZARQuoteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.price != nil {
		fields = append(fields, zarquote.FieldPrice)
	}
	if m._Timestamp != nil {
		fields = append(fields, zarquote.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ZARQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case zarquote.FieldPrice:
		return m.Price()
	case zarquote.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ZARQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case zarquote.FieldPrice:
		return m.OldPrice(ctx)
	case zarquote.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown ZARQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ZARQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case zarquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case zarquote.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown ZARQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ZARQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, zarquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ZARQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case zarquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ZARQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case zarquote.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown ZARQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ZARQuoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ZARQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ZARQuoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ZARQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ZARQuoteMutation) ResetField(name string) error {
	switch name {
	case zarquote.FieldPrice:
		m.ResetPrice()
		return nil
	case zarquote.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown ZARQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ZARQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ZARQuoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ZARQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ZARQuoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ZARQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ZARQuoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ZARQuoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ZARQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ZARQuoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ZARQuote edge %s", name)
}

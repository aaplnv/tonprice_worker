// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/ent/idrquote"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IDRQuoteCreate is the builder for creating a IDRQuote entity.
type IDRQuoteCreate struct {
	config
	mutation *IDRQuoteMutation
	hooks    []Hook
}

// SetPrice sets the "price" field.
func (iqc *IDRQuoteCreate) SetPrice(f float64) *IDRQuoteCreate {
	iqc.mutation.SetPrice(f)
	return iqc
}

// SetTimestamp sets the "Timestamp" field.
func (iqc *IDRQuoteCreate) SetTimestamp(t time.Time) *IDRQuoteCreate {
	iqc.mutation.SetTimestamp(t)
	return iqc
}

// SetID sets the "id" field.
func (iqc *IDRQuoteCreate) SetID(i int) *IDRQuoteCreate {
	iqc.mutation.SetID(i)
	return iqc
}

// Mutation returns the IDRQuoteMutation object of the builder.
func (iqc *IDRQuoteCreate) Mutation() *IDRQuoteMutation {
	return iqc.mutation
}

// Save creates the IDRQuote in the database.
func (iqc *IDRQuoteCreate) Save(ctx context.Context) (*IDRQuote, error) {
	var (
		err  error
		node *IDRQuote
	)
	if len(iqc.hooks) == 0 {
		if err = iqc.check(); err != nil {
			return nil, err
		}
		node, err = iqc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IDRQuoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iqc.check(); err != nil {
				return nil, err
			}
			iqc.mutation = mutation
			if node, err = iqc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(iqc.hooks) - 1; i >= 0; i-- {
			if iqc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iqc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iqc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (iqc *IDRQuoteCreate) SaveX(ctx context.Context) *IDRQuote {
	v, err := iqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iqc *IDRQuoteCreate) Exec(ctx context.Context) error {
	_, err := iqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iqc *IDRQuoteCreate) ExecX(ctx context.Context) {
	if err := iqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iqc *IDRQuoteCreate) check() error {
	if _, ok := iqc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "IDRQuote.price"`)}
	}
	if _, ok := iqc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "Timestamp", err: errors.New(`ent: missing required field "IDRQuote.Timestamp"`)}
	}
	return nil
}

func (iqc *IDRQuoteCreate) sqlSave(ctx context.Context) (*IDRQuote, error) {
	_node, _spec := iqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (iqc *IDRQuoteCreate) createSpec() (*IDRQuote, *sqlgraph.CreateSpec) {
	var (
		_node = &IDRQuote{config: iqc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: idrquote.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: idrquote.FieldID,
			},
		}
	)
	if id, ok := iqc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := iqc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: idrquote.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := iqc.mutation.Timestamp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: idrquote.FieldTimestamp,
		})
		_node.Timestamp = value
	}
	return _node, _spec
}

// IDRQuoteCreateBulk is the builder for creating many IDRQuote entities in bulk.
type IDRQuoteCreateBulk struct {
	config
	builders []*IDRQuoteCreate
}

// Save creates the IDRQuote entities in the database.
func (iqcb *IDRQuoteCreateBulk) Save(ctx context.Context) ([]*IDRQuote, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iqcb.builders))
	nodes := make([]*IDRQuote, len(iqcb.builders))
	mutators := make([]Mutator, len(iqcb.builders))
	for i := range iqcb.builders {
		func(i int, root context.Context) {
			builder := iqcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IDRQuoteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iqcb *IDRQuoteCreateBulk) SaveX(ctx context.Context) []*IDRQuote {
	v, err := iqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iqcb *IDRQuoteCreateBulk) Exec(ctx context.Context) error {
	_, err := iqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iqcb *IDRQuoteCreateBulk) ExecX(ctx context.Context) {
	if err := iqcb.Exec(ctx); err != nil {
		panic(err)
	}
}

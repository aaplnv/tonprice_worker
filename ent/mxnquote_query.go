// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/ent/mxnquote"
	"main/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MXNQuoteQuery is the builder for querying MXNQuote entities.
type MXNQuoteQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.MXNQuote
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MXNQuoteQuery builder.
func (mqq *MXNQuoteQuery) Where(ps ...predicate.MXNQuote) *MXNQuoteQuery {
	mqq.predicates = append(mqq.predicates, ps...)
	return mqq
}

// Limit adds a limit step to the query.
func (mqq *MXNQuoteQuery) Limit(limit int) *MXNQuoteQuery {
	mqq.limit = &limit
	return mqq
}

// Offset adds an offset step to the query.
func (mqq *MXNQuoteQuery) Offset(offset int) *MXNQuoteQuery {
	mqq.offset = &offset
	return mqq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mqq *MXNQuoteQuery) Unique(unique bool) *MXNQuoteQuery {
	mqq.unique = &unique
	return mqq
}

// Order adds an order step to the query.
func (mqq *MXNQuoteQuery) Order(o ...OrderFunc) *MXNQuoteQuery {
	mqq.order = append(mqq.order, o...)
	return mqq
}

// First returns the first MXNQuote entity from the query.
// Returns a *NotFoundError when no MXNQuote was found.
func (mqq *MXNQuoteQuery) First(ctx context.Context) (*MXNQuote, error) {
	nodes, err := mqq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{mxnquote.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mqq *MXNQuoteQuery) FirstX(ctx context.Context) *MXNQuote {
	node, err := mqq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MXNQuote ID from the query.
// Returns a *NotFoundError when no MXNQuote ID was found.
func (mqq *MXNQuoteQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mqq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{mxnquote.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mqq *MXNQuoteQuery) FirstIDX(ctx context.Context) int {
	id, err := mqq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MXNQuote entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MXNQuote entity is found.
// Returns a *NotFoundError when no MXNQuote entities are found.
func (mqq *MXNQuoteQuery) Only(ctx context.Context) (*MXNQuote, error) {
	nodes, err := mqq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{mxnquote.Label}
	default:
		return nil, &NotSingularError{mxnquote.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mqq *MXNQuoteQuery) OnlyX(ctx context.Context) *MXNQuote {
	node, err := mqq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MXNQuote ID in the query.
// Returns a *NotSingularError when more than one MXNQuote ID is found.
// Returns a *NotFoundError when no entities are found.
func (mqq *MXNQuoteQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mqq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{mxnquote.Label}
	default:
		err = &NotSingularError{mxnquote.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mqq *MXNQuoteQuery) OnlyIDX(ctx context.Context) int {
	id, err := mqq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MXNQuotes.
func (mqq *MXNQuoteQuery) All(ctx context.Context) ([]*MXNQuote, error) {
	if err := mqq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return mqq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (mqq *MXNQuoteQuery) AllX(ctx context.Context) []*MXNQuote {
	nodes, err := mqq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MXNQuote IDs.
func (mqq *MXNQuoteQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := mqq.Select(mxnquote.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mqq *MXNQuoteQuery) IDsX(ctx context.Context) []int {
	ids, err := mqq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mqq *MXNQuoteQuery) Count(ctx context.Context) (int, error) {
	if err := mqq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return mqq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (mqq *MXNQuoteQuery) CountX(ctx context.Context) int {
	count, err := mqq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mqq *MXNQuoteQuery) Exist(ctx context.Context) (bool, error) {
	if err := mqq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return mqq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (mqq *MXNQuoteQuery) ExistX(ctx context.Context) bool {
	exist, err := mqq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MXNQuoteQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mqq *MXNQuoteQuery) Clone() *MXNQuoteQuery {
	if mqq == nil {
		return nil
	}
	return &MXNQuoteQuery{
		config:     mqq.config,
		limit:      mqq.limit,
		offset:     mqq.offset,
		order:      append([]OrderFunc{}, mqq.order...),
		predicates: append([]predicate.MXNQuote{}, mqq.predicates...),
		// clone intermediate query.
		sql:    mqq.sql.Clone(),
		path:   mqq.path,
		unique: mqq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Price float64 `json:"price,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MXNQuote.Query().
//		GroupBy(mxnquote.FieldPrice).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (mqq *MXNQuoteQuery) GroupBy(field string, fields ...string) *MXNQuoteGroupBy {
	group := &MXNQuoteGroupBy{config: mqq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := mqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return mqq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Price float64 `json:"price,omitempty"`
//	}
//
//	client.MXNQuote.Query().
//		Select(mxnquote.FieldPrice).
//		Scan(ctx, &v)
//
func (mqq *MXNQuoteQuery) Select(fields ...string) *MXNQuoteSelect {
	mqq.fields = append(mqq.fields, fields...)
	return &MXNQuoteSelect{MXNQuoteQuery: mqq}
}

func (mqq *MXNQuoteQuery) prepareQuery(ctx context.Context) error {
	for _, f := range mqq.fields {
		if !mxnquote.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mqq.path != nil {
		prev, err := mqq.path(ctx)
		if err != nil {
			return err
		}
		mqq.sql = prev
	}
	return nil
}

func (mqq *MXNQuoteQuery) sqlAll(ctx context.Context) ([]*MXNQuote, error) {
	var (
		nodes = []*MXNQuote{}
		_spec = mqq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &MXNQuote{config: mqq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, mqq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (mqq *MXNQuoteQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mqq.querySpec()
	_spec.Node.Columns = mqq.fields
	if len(mqq.fields) > 0 {
		_spec.Unique = mqq.unique != nil && *mqq.unique
	}
	return sqlgraph.CountNodes(ctx, mqq.driver, _spec)
}

func (mqq *MXNQuoteQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := mqq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (mqq *MXNQuoteQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mxnquote.Table,
			Columns: mxnquote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mxnquote.FieldID,
			},
		},
		From:   mqq.sql,
		Unique: true,
	}
	if unique := mqq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := mqq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mxnquote.FieldID)
		for i := range fields {
			if fields[i] != mxnquote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mqq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mqq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mqq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mqq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mqq *MXNQuoteQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mqq.driver.Dialect())
	t1 := builder.Table(mxnquote.Table)
	columns := mqq.fields
	if len(columns) == 0 {
		columns = mxnquote.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mqq.sql != nil {
		selector = mqq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mqq.unique != nil && *mqq.unique {
		selector.Distinct()
	}
	for _, p := range mqq.predicates {
		p(selector)
	}
	for _, p := range mqq.order {
		p(selector)
	}
	if offset := mqq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mqq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MXNQuoteGroupBy is the group-by builder for MXNQuote entities.
type MXNQuoteGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mqgb *MXNQuoteGroupBy) Aggregate(fns ...AggregateFunc) *MXNQuoteGroupBy {
	mqgb.fns = append(mqgb.fns, fns...)
	return mqgb
}

// Scan applies the group-by query and scans the result into the given value.
func (mqgb *MXNQuoteGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := mqgb.path(ctx)
	if err != nil {
		return err
	}
	mqgb.sql = query
	return mqgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mqgb *MXNQuoteGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := mqgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (mqgb *MXNQuoteGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(mqgb.fields) > 1 {
		return nil, errors.New("ent: MXNQuoteGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := mqgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mqgb *MXNQuoteGroupBy) StringsX(ctx context.Context) []string {
	v, err := mqgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mqgb *MXNQuoteGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mqgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mxnquote.Label}
	default:
		err = fmt.Errorf("ent: MXNQuoteGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mqgb *MXNQuoteGroupBy) StringX(ctx context.Context) string {
	v, err := mqgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (mqgb *MXNQuoteGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(mqgb.fields) > 1 {
		return nil, errors.New("ent: MXNQuoteGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := mqgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mqgb *MXNQuoteGroupBy) IntsX(ctx context.Context) []int {
	v, err := mqgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mqgb *MXNQuoteGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mqgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mxnquote.Label}
	default:
		err = fmt.Errorf("ent: MXNQuoteGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mqgb *MXNQuoteGroupBy) IntX(ctx context.Context) int {
	v, err := mqgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (mqgb *MXNQuoteGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(mqgb.fields) > 1 {
		return nil, errors.New("ent: MXNQuoteGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := mqgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mqgb *MXNQuoteGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := mqgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mqgb *MXNQuoteGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mqgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mxnquote.Label}
	default:
		err = fmt.Errorf("ent: MXNQuoteGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mqgb *MXNQuoteGroupBy) Float64X(ctx context.Context) float64 {
	v, err := mqgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (mqgb *MXNQuoteGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(mqgb.fields) > 1 {
		return nil, errors.New("ent: MXNQuoteGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := mqgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mqgb *MXNQuoteGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := mqgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mqgb *MXNQuoteGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mqgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mxnquote.Label}
	default:
		err = fmt.Errorf("ent: MXNQuoteGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mqgb *MXNQuoteGroupBy) BoolX(ctx context.Context) bool {
	v, err := mqgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mqgb *MXNQuoteGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range mqgb.fields {
		if !mxnquote.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := mqgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mqgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mqgb *MXNQuoteGroupBy) sqlQuery() *sql.Selector {
	selector := mqgb.sql.Select()
	aggregation := make([]string, 0, len(mqgb.fns))
	for _, fn := range mqgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(mqgb.fields)+len(mqgb.fns))
		for _, f := range mqgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(mqgb.fields...)...)
}

// MXNQuoteSelect is the builder for selecting fields of MXNQuote entities.
type MXNQuoteSelect struct {
	*MXNQuoteQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (mqs *MXNQuoteSelect) Scan(ctx context.Context, v interface{}) error {
	if err := mqs.prepareQuery(ctx); err != nil {
		return err
	}
	mqs.sql = mqs.MXNQuoteQuery.sqlQuery(ctx)
	return mqs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mqs *MXNQuoteSelect) ScanX(ctx context.Context, v interface{}) {
	if err := mqs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (mqs *MXNQuoteSelect) Strings(ctx context.Context) ([]string, error) {
	if len(mqs.fields) > 1 {
		return nil, errors.New("ent: MXNQuoteSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := mqs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mqs *MXNQuoteSelect) StringsX(ctx context.Context) []string {
	v, err := mqs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (mqs *MXNQuoteSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mqs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mxnquote.Label}
	default:
		err = fmt.Errorf("ent: MXNQuoteSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mqs *MXNQuoteSelect) StringX(ctx context.Context) string {
	v, err := mqs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (mqs *MXNQuoteSelect) Ints(ctx context.Context) ([]int, error) {
	if len(mqs.fields) > 1 {
		return nil, errors.New("ent: MXNQuoteSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := mqs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mqs *MXNQuoteSelect) IntsX(ctx context.Context) []int {
	v, err := mqs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (mqs *MXNQuoteSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mqs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mxnquote.Label}
	default:
		err = fmt.Errorf("ent: MXNQuoteSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mqs *MXNQuoteSelect) IntX(ctx context.Context) int {
	v, err := mqs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (mqs *MXNQuoteSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(mqs.fields) > 1 {
		return nil, errors.New("ent: MXNQuoteSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := mqs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mqs *MXNQuoteSelect) Float64sX(ctx context.Context) []float64 {
	v, err := mqs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (mqs *MXNQuoteSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mqs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mxnquote.Label}
	default:
		err = fmt.Errorf("ent: MXNQuoteSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mqs *MXNQuoteSelect) Float64X(ctx context.Context) float64 {
	v, err := mqs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (mqs *MXNQuoteSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(mqs.fields) > 1 {
		return nil, errors.New("ent: MXNQuoteSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := mqs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mqs *MXNQuoteSelect) BoolsX(ctx context.Context) []bool {
	v, err := mqs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (mqs *MXNQuoteSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mqs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{mxnquote.Label}
	default:
		err = fmt.Errorf("ent: MXNQuoteSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mqs *MXNQuoteSelect) BoolX(ctx context.Context) bool {
	v, err := mqs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mqs *MXNQuoteSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := mqs.sql.Query()
	if err := mqs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

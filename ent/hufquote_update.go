// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/ent/hufquote"
	"main/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HUFQuoteUpdate is the builder for updating HUFQuote entities.
type HUFQuoteUpdate struct {
	config
	hooks    []Hook
	mutation *HUFQuoteMutation
}

// Where appends a list predicates to the HUFQuoteUpdate builder.
func (hqu *HUFQuoteUpdate) Where(ps ...predicate.HUFQuote) *HUFQuoteUpdate {
	hqu.mutation.Where(ps...)
	return hqu
}

// SetPrice sets the "price" field.
func (hqu *HUFQuoteUpdate) SetPrice(f float64) *HUFQuoteUpdate {
	hqu.mutation.ResetPrice()
	hqu.mutation.SetPrice(f)
	return hqu
}

// AddPrice adds f to the "price" field.
func (hqu *HUFQuoteUpdate) AddPrice(f float64) *HUFQuoteUpdate {
	hqu.mutation.AddPrice(f)
	return hqu
}

// SetTimestamp sets the "Timestamp" field.
func (hqu *HUFQuoteUpdate) SetTimestamp(t time.Time) *HUFQuoteUpdate {
	hqu.mutation.SetTimestamp(t)
	return hqu
}

// Mutation returns the HUFQuoteMutation object of the builder.
func (hqu *HUFQuoteUpdate) Mutation() *HUFQuoteMutation {
	return hqu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hqu *HUFQuoteUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(hqu.hooks) == 0 {
		affected, err = hqu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HUFQuoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hqu.mutation = mutation
			affected, err = hqu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hqu.hooks) - 1; i >= 0; i-- {
			if hqu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hqu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hqu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hqu *HUFQuoteUpdate) SaveX(ctx context.Context) int {
	affected, err := hqu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hqu *HUFQuoteUpdate) Exec(ctx context.Context) error {
	_, err := hqu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hqu *HUFQuoteUpdate) ExecX(ctx context.Context) {
	if err := hqu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hqu *HUFQuoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hufquote.Table,
			Columns: hufquote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hufquote.FieldID,
			},
		},
	}
	if ps := hqu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hqu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: hufquote.FieldPrice,
		})
	}
	if value, ok := hqu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: hufquote.FieldPrice,
		})
	}
	if value, ok := hqu.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: hufquote.FieldTimestamp,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hqu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hufquote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// HUFQuoteUpdateOne is the builder for updating a single HUFQuote entity.
type HUFQuoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HUFQuoteMutation
}

// SetPrice sets the "price" field.
func (hquo *HUFQuoteUpdateOne) SetPrice(f float64) *HUFQuoteUpdateOne {
	hquo.mutation.ResetPrice()
	hquo.mutation.SetPrice(f)
	return hquo
}

// AddPrice adds f to the "price" field.
func (hquo *HUFQuoteUpdateOne) AddPrice(f float64) *HUFQuoteUpdateOne {
	hquo.mutation.AddPrice(f)
	return hquo
}

// SetTimestamp sets the "Timestamp" field.
func (hquo *HUFQuoteUpdateOne) SetTimestamp(t time.Time) *HUFQuoteUpdateOne {
	hquo.mutation.SetTimestamp(t)
	return hquo
}

// Mutation returns the HUFQuoteMutation object of the builder.
func (hquo *HUFQuoteUpdateOne) Mutation() *HUFQuoteMutation {
	return hquo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hquo *HUFQuoteUpdateOne) Select(field string, fields ...string) *HUFQuoteUpdateOne {
	hquo.fields = append([]string{field}, fields...)
	return hquo
}

// Save executes the query and returns the updated HUFQuote entity.
func (hquo *HUFQuoteUpdateOne) Save(ctx context.Context) (*HUFQuote, error) {
	var (
		err  error
		node *HUFQuote
	)
	if len(hquo.hooks) == 0 {
		node, err = hquo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HUFQuoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hquo.mutation = mutation
			node, err = hquo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(hquo.hooks) - 1; i >= 0; i-- {
			if hquo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hquo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hquo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (hquo *HUFQuoteUpdateOne) SaveX(ctx context.Context) *HUFQuote {
	node, err := hquo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hquo *HUFQuoteUpdateOne) Exec(ctx context.Context) error {
	_, err := hquo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hquo *HUFQuoteUpdateOne) ExecX(ctx context.Context) {
	if err := hquo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hquo *HUFQuoteUpdateOne) sqlSave(ctx context.Context) (_node *HUFQuote, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hufquote.Table,
			Columns: hufquote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hufquote.FieldID,
			},
		},
	}
	id, ok := hquo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HUFQuote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hquo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hufquote.FieldID)
		for _, f := range fields {
			if !hufquote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hufquote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hquo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hquo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: hufquote.FieldPrice,
		})
	}
	if value, ok := hquo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: hufquote.FieldPrice,
		})
	}
	if value, ok := hquo.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: hufquote.FieldTimestamp,
		})
	}
	_node = &HUFQuote{config: hquo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hquo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hufquote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"main/ent/uahquote"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UAHQuote is the model entity for the UAHQuote schema.
type UAHQuote struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Timestamp holds the value of the "Timestamp" field.
	Timestamp time.Time `json:"Timestamp,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UAHQuote) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case uahquote.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case uahquote.FieldID:
			values[i] = new(sql.NullInt64)
		case uahquote.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UAHQuote", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UAHQuote fields.
func (uq *UAHQuote) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case uahquote.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uq.ID = int(value.Int64)
		case uahquote.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				uq.Price = value.Float64
			}
		case uahquote.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Timestamp", values[i])
			} else if value.Valid {
				uq.Timestamp = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UAHQuote.
// Note that you need to call UAHQuote.Unwrap() before calling this method if this UAHQuote
// was returned from a transaction, and the transaction was committed or rolled back.
func (uq *UAHQuote) Update() *UAHQuoteUpdateOne {
	return (&UAHQuoteClient{config: uq.config}).UpdateOne(uq)
}

// Unwrap unwraps the UAHQuote entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uq *UAHQuote) Unwrap() *UAHQuote {
	tx, ok := uq.config.driver.(*txDriver)
	if !ok {
		panic("ent: UAHQuote is not a transactional entity")
	}
	uq.config.driver = tx.drv
	return uq
}

// String implements the fmt.Stringer.
func (uq *UAHQuote) String() string {
	var builder strings.Builder
	builder.WriteString("UAHQuote(")
	builder.WriteString(fmt.Sprintf("id=%v", uq.ID))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", uq.Price))
	builder.WriteString(", Timestamp=")
	builder.WriteString(uq.Timestamp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UAHQuotes is a parsable slice of UAHQuote.
type UAHQuotes []*UAHQuote

func (uq UAHQuotes) config(cfg config) {
	for _i := range uq {
		uq[_i].config = cfg
	}
}

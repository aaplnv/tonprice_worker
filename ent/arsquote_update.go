// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/ent/arsquote"
	"main/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ARSQuoteUpdate is the builder for updating ARSQuote entities.
type ARSQuoteUpdate struct {
	config
	hooks    []Hook
	mutation *ARSQuoteMutation
}

// Where appends a list predicates to the ARSQuoteUpdate builder.
func (aqu *ARSQuoteUpdate) Where(ps ...predicate.ARSQuote) *ARSQuoteUpdate {
	aqu.mutation.Where(ps...)
	return aqu
}

// SetPrice sets the "price" field.
func (aqu *ARSQuoteUpdate) SetPrice(f float64) *ARSQuoteUpdate {
	aqu.mutation.ResetPrice()
	aqu.mutation.SetPrice(f)
	return aqu
}

// AddPrice adds f to the "price" field.
func (aqu *ARSQuoteUpdate) AddPrice(f float64) *ARSQuoteUpdate {
	aqu.mutation.AddPrice(f)
	return aqu
}

// SetTimestamp sets the "Timestamp" field.
func (aqu *ARSQuoteUpdate) SetTimestamp(t time.Time) *ARSQuoteUpdate {
	aqu.mutation.SetTimestamp(t)
	return aqu
}

// Mutation returns the ARSQuoteMutation object of the builder.
func (aqu *ARSQuoteUpdate) Mutation() *ARSQuoteMutation {
	return aqu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aqu *ARSQuoteUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(aqu.hooks) == 0 {
		affected, err = aqu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ARSQuoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aqu.mutation = mutation
			affected, err = aqu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aqu.hooks) - 1; i >= 0; i-- {
			if aqu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aqu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aqu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aqu *ARSQuoteUpdate) SaveX(ctx context.Context) int {
	affected, err := aqu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aqu *ARSQuoteUpdate) Exec(ctx context.Context) error {
	_, err := aqu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aqu *ARSQuoteUpdate) ExecX(ctx context.Context) {
	if err := aqu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aqu *ARSQuoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   arsquote.Table,
			Columns: arsquote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: arsquote.FieldID,
			},
		},
	}
	if ps := aqu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aqu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: arsquote.FieldPrice,
		})
	}
	if value, ok := aqu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: arsquote.FieldPrice,
		})
	}
	if value, ok := aqu.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: arsquote.FieldTimestamp,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aqu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{arsquote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ARSQuoteUpdateOne is the builder for updating a single ARSQuote entity.
type ARSQuoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ARSQuoteMutation
}

// SetPrice sets the "price" field.
func (aquo *ARSQuoteUpdateOne) SetPrice(f float64) *ARSQuoteUpdateOne {
	aquo.mutation.ResetPrice()
	aquo.mutation.SetPrice(f)
	return aquo
}

// AddPrice adds f to the "price" field.
func (aquo *ARSQuoteUpdateOne) AddPrice(f float64) *ARSQuoteUpdateOne {
	aquo.mutation.AddPrice(f)
	return aquo
}

// SetTimestamp sets the "Timestamp" field.
func (aquo *ARSQuoteUpdateOne) SetTimestamp(t time.Time) *ARSQuoteUpdateOne {
	aquo.mutation.SetTimestamp(t)
	return aquo
}

// Mutation returns the ARSQuoteMutation object of the builder.
func (aquo *ARSQuoteUpdateOne) Mutation() *ARSQuoteMutation {
	return aquo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aquo *ARSQuoteUpdateOne) Select(field string, fields ...string) *ARSQuoteUpdateOne {
	aquo.fields = append([]string{field}, fields...)
	return aquo
}

// Save executes the query and returns the updated ARSQuote entity.
func (aquo *ARSQuoteUpdateOne) Save(ctx context.Context) (*ARSQuote, error) {
	var (
		err  error
		node *ARSQuote
	)
	if len(aquo.hooks) == 0 {
		node, err = aquo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ARSQuoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aquo.mutation = mutation
			node, err = aquo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aquo.hooks) - 1; i >= 0; i-- {
			if aquo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aquo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aquo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aquo *ARSQuoteUpdateOne) SaveX(ctx context.Context) *ARSQuote {
	node, err := aquo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aquo *ARSQuoteUpdateOne) Exec(ctx context.Context) error {
	_, err := aquo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aquo *ARSQuoteUpdateOne) ExecX(ctx context.Context) {
	if err := aquo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aquo *ARSQuoteUpdateOne) sqlSave(ctx context.Context) (_node *ARSQuote, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   arsquote.Table,
			Columns: arsquote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: arsquote.FieldID,
			},
		},
	}
	id, ok := aquo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ARSQuote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aquo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, arsquote.FieldID)
		for _, f := range fields {
			if !arsquote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != arsquote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aquo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aquo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: arsquote.FieldPrice,
		})
	}
	if value, ok := aquo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: arsquote.FieldPrice,
		})
	}
	if value, ok := aquo.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: arsquote.FieldTimestamp,
		})
	}
	_node = &ARSQuote{config: aquo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aquo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{arsquote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

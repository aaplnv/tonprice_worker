// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"main/ent/migrate"

	"main/ent/audquote"
	"main/ent/chfquote"
	"main/ent/cnyquote"
	"main/ent/czkquote"
	"main/ent/euroquote"
	"main/ent/gbpquote"
	"main/ent/hkdquote"
	"main/ent/hufquote"
	"main/ent/inrquote"
	"main/ent/nokquote"
	"main/ent/nzdquote"
	"main/ent/pkrquote"
	"main/ent/plnquote"
	"main/ent/rubquote"
	"main/ent/sekquote"
	"main/ent/twdquote"
	"main/ent/uahquote"
	"main/ent/usdquote"
	"main/ent/zarquote"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AUDQuote is the client for interacting with the AUDQuote builders.
	AUDQuote *AUDQuoteClient
	// CHFQuote is the client for interacting with the CHFQuote builders.
	CHFQuote *CHFQuoteClient
	// CNYQuote is the client for interacting with the CNYQuote builders.
	CNYQuote *CNYQuoteClient
	// CZKQuote is the client for interacting with the CZKQuote builders.
	CZKQuote *CZKQuoteClient
	// EUROQuote is the client for interacting with the EUROQuote builders.
	EUROQuote *EUROQuoteClient
	// GBPQuote is the client for interacting with the GBPQuote builders.
	GBPQuote *GBPQuoteClient
	// HKDQuote is the client for interacting with the HKDQuote builders.
	HKDQuote *HKDQuoteClient
	// HUFQuote is the client for interacting with the HUFQuote builders.
	HUFQuote *HUFQuoteClient
	// INRQuote is the client for interacting with the INRQuote builders.
	INRQuote *INRQuoteClient
	// NOKQuote is the client for interacting with the NOKQuote builders.
	NOKQuote *NOKQuoteClient
	// NZDQuote is the client for interacting with the NZDQuote builders.
	NZDQuote *NZDQuoteClient
	// PKRQuote is the client for interacting with the PKRQuote builders.
	PKRQuote *PKRQuoteClient
	// PLNQuote is the client for interacting with the PLNQuote builders.
	PLNQuote *PLNQuoteClient
	// RUBQuote is the client for interacting with the RUBQuote builders.
	RUBQuote *RUBQuoteClient
	// SEKQuote is the client for interacting with the SEKQuote builders.
	SEKQuote *SEKQuoteClient
	// TWDQuote is the client for interacting with the TWDQuote builders.
	TWDQuote *TWDQuoteClient
	// UAHQuote is the client for interacting with the UAHQuote builders.
	UAHQuote *UAHQuoteClient
	// USDQuote is the client for interacting with the USDQuote builders.
	USDQuote *USDQuoteClient
	// ZARQuote is the client for interacting with the ZARQuote builders.
	ZARQuote *ZARQuoteClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AUDQuote = NewAUDQuoteClient(c.config)
	c.CHFQuote = NewCHFQuoteClient(c.config)
	c.CNYQuote = NewCNYQuoteClient(c.config)
	c.CZKQuote = NewCZKQuoteClient(c.config)
	c.EUROQuote = NewEUROQuoteClient(c.config)
	c.GBPQuote = NewGBPQuoteClient(c.config)
	c.HKDQuote = NewHKDQuoteClient(c.config)
	c.HUFQuote = NewHUFQuoteClient(c.config)
	c.INRQuote = NewINRQuoteClient(c.config)
	c.NOKQuote = NewNOKQuoteClient(c.config)
	c.NZDQuote = NewNZDQuoteClient(c.config)
	c.PKRQuote = NewPKRQuoteClient(c.config)
	c.PLNQuote = NewPLNQuoteClient(c.config)
	c.RUBQuote = NewRUBQuoteClient(c.config)
	c.SEKQuote = NewSEKQuoteClient(c.config)
	c.TWDQuote = NewTWDQuoteClient(c.config)
	c.UAHQuote = NewUAHQuoteClient(c.config)
	c.USDQuote = NewUSDQuoteClient(c.config)
	c.ZARQuote = NewZARQuoteClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		AUDQuote:  NewAUDQuoteClient(cfg),
		CHFQuote:  NewCHFQuoteClient(cfg),
		CNYQuote:  NewCNYQuoteClient(cfg),
		CZKQuote:  NewCZKQuoteClient(cfg),
		EUROQuote: NewEUROQuoteClient(cfg),
		GBPQuote:  NewGBPQuoteClient(cfg),
		HKDQuote:  NewHKDQuoteClient(cfg),
		HUFQuote:  NewHUFQuoteClient(cfg),
		INRQuote:  NewINRQuoteClient(cfg),
		NOKQuote:  NewNOKQuoteClient(cfg),
		NZDQuote:  NewNZDQuoteClient(cfg),
		PKRQuote:  NewPKRQuoteClient(cfg),
		PLNQuote:  NewPLNQuoteClient(cfg),
		RUBQuote:  NewRUBQuoteClient(cfg),
		SEKQuote:  NewSEKQuoteClient(cfg),
		TWDQuote:  NewTWDQuoteClient(cfg),
		UAHQuote:  NewUAHQuoteClient(cfg),
		USDQuote:  NewUSDQuoteClient(cfg),
		ZARQuote:  NewZARQuoteClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		AUDQuote:  NewAUDQuoteClient(cfg),
		CHFQuote:  NewCHFQuoteClient(cfg),
		CNYQuote:  NewCNYQuoteClient(cfg),
		CZKQuote:  NewCZKQuoteClient(cfg),
		EUROQuote: NewEUROQuoteClient(cfg),
		GBPQuote:  NewGBPQuoteClient(cfg),
		HKDQuote:  NewHKDQuoteClient(cfg),
		HUFQuote:  NewHUFQuoteClient(cfg),
		INRQuote:  NewINRQuoteClient(cfg),
		NOKQuote:  NewNOKQuoteClient(cfg),
		NZDQuote:  NewNZDQuoteClient(cfg),
		PKRQuote:  NewPKRQuoteClient(cfg),
		PLNQuote:  NewPLNQuoteClient(cfg),
		RUBQuote:  NewRUBQuoteClient(cfg),
		SEKQuote:  NewSEKQuoteClient(cfg),
		TWDQuote:  NewTWDQuoteClient(cfg),
		UAHQuote:  NewUAHQuoteClient(cfg),
		USDQuote:  NewUSDQuoteClient(cfg),
		ZARQuote:  NewZARQuoteClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AUDQuote.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AUDQuote.Use(hooks...)
	c.CHFQuote.Use(hooks...)
	c.CNYQuote.Use(hooks...)
	c.CZKQuote.Use(hooks...)
	c.EUROQuote.Use(hooks...)
	c.GBPQuote.Use(hooks...)
	c.HKDQuote.Use(hooks...)
	c.HUFQuote.Use(hooks...)
	c.INRQuote.Use(hooks...)
	c.NOKQuote.Use(hooks...)
	c.NZDQuote.Use(hooks...)
	c.PKRQuote.Use(hooks...)
	c.PLNQuote.Use(hooks...)
	c.RUBQuote.Use(hooks...)
	c.SEKQuote.Use(hooks...)
	c.TWDQuote.Use(hooks...)
	c.UAHQuote.Use(hooks...)
	c.USDQuote.Use(hooks...)
	c.ZARQuote.Use(hooks...)
}

// AUDQuoteClient is a client for the AUDQuote schema.
type AUDQuoteClient struct {
	config
}

// NewAUDQuoteClient returns a client for the AUDQuote from the given config.
func NewAUDQuoteClient(c config) *AUDQuoteClient {
	return &AUDQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `audquote.Hooks(f(g(h())))`.
func (c *AUDQuoteClient) Use(hooks ...Hook) {
	c.hooks.AUDQuote = append(c.hooks.AUDQuote, hooks...)
}

// Create returns a create builder for AUDQuote.
func (c *AUDQuoteClient) Create() *AUDQuoteCreate {
	mutation := newAUDQuoteMutation(c.config, OpCreate)
	return &AUDQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AUDQuote entities.
func (c *AUDQuoteClient) CreateBulk(builders ...*AUDQuoteCreate) *AUDQuoteCreateBulk {
	return &AUDQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AUDQuote.
func (c *AUDQuoteClient) Update() *AUDQuoteUpdate {
	mutation := newAUDQuoteMutation(c.config, OpUpdate)
	return &AUDQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AUDQuoteClient) UpdateOne(aq *AUDQuote) *AUDQuoteUpdateOne {
	mutation := newAUDQuoteMutation(c.config, OpUpdateOne, withAUDQuote(aq))
	return &AUDQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AUDQuoteClient) UpdateOneID(id int) *AUDQuoteUpdateOne {
	mutation := newAUDQuoteMutation(c.config, OpUpdateOne, withAUDQuoteID(id))
	return &AUDQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AUDQuote.
func (c *AUDQuoteClient) Delete() *AUDQuoteDelete {
	mutation := newAUDQuoteMutation(c.config, OpDelete)
	return &AUDQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AUDQuoteClient) DeleteOne(aq *AUDQuote) *AUDQuoteDeleteOne {
	return c.DeleteOneID(aq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AUDQuoteClient) DeleteOneID(id int) *AUDQuoteDeleteOne {
	builder := c.Delete().Where(audquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AUDQuoteDeleteOne{builder}
}

// Query returns a query builder for AUDQuote.
func (c *AUDQuoteClient) Query() *AUDQuoteQuery {
	return &AUDQuoteQuery{
		config: c.config,
	}
}

// Get returns a AUDQuote entity by its id.
func (c *AUDQuoteClient) Get(ctx context.Context, id int) (*AUDQuote, error) {
	return c.Query().Where(audquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AUDQuoteClient) GetX(ctx context.Context, id int) *AUDQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AUDQuoteClient) Hooks() []Hook {
	return c.hooks.AUDQuote
}

// CHFQuoteClient is a client for the CHFQuote schema.
type CHFQuoteClient struct {
	config
}

// NewCHFQuoteClient returns a client for the CHFQuote from the given config.
func NewCHFQuoteClient(c config) *CHFQuoteClient {
	return &CHFQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chfquote.Hooks(f(g(h())))`.
func (c *CHFQuoteClient) Use(hooks ...Hook) {
	c.hooks.CHFQuote = append(c.hooks.CHFQuote, hooks...)
}

// Create returns a create builder for CHFQuote.
func (c *CHFQuoteClient) Create() *CHFQuoteCreate {
	mutation := newCHFQuoteMutation(c.config, OpCreate)
	return &CHFQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CHFQuote entities.
func (c *CHFQuoteClient) CreateBulk(builders ...*CHFQuoteCreate) *CHFQuoteCreateBulk {
	return &CHFQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CHFQuote.
func (c *CHFQuoteClient) Update() *CHFQuoteUpdate {
	mutation := newCHFQuoteMutation(c.config, OpUpdate)
	return &CHFQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CHFQuoteClient) UpdateOne(cq *CHFQuote) *CHFQuoteUpdateOne {
	mutation := newCHFQuoteMutation(c.config, OpUpdateOne, withCHFQuote(cq))
	return &CHFQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CHFQuoteClient) UpdateOneID(id int) *CHFQuoteUpdateOne {
	mutation := newCHFQuoteMutation(c.config, OpUpdateOne, withCHFQuoteID(id))
	return &CHFQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CHFQuote.
func (c *CHFQuoteClient) Delete() *CHFQuoteDelete {
	mutation := newCHFQuoteMutation(c.config, OpDelete)
	return &CHFQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CHFQuoteClient) DeleteOne(cq *CHFQuote) *CHFQuoteDeleteOne {
	return c.DeleteOneID(cq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CHFQuoteClient) DeleteOneID(id int) *CHFQuoteDeleteOne {
	builder := c.Delete().Where(chfquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CHFQuoteDeleteOne{builder}
}

// Query returns a query builder for CHFQuote.
func (c *CHFQuoteClient) Query() *CHFQuoteQuery {
	return &CHFQuoteQuery{
		config: c.config,
	}
}

// Get returns a CHFQuote entity by its id.
func (c *CHFQuoteClient) Get(ctx context.Context, id int) (*CHFQuote, error) {
	return c.Query().Where(chfquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CHFQuoteClient) GetX(ctx context.Context, id int) *CHFQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CHFQuoteClient) Hooks() []Hook {
	return c.hooks.CHFQuote
}

// CNYQuoteClient is a client for the CNYQuote schema.
type CNYQuoteClient struct {
	config
}

// NewCNYQuoteClient returns a client for the CNYQuote from the given config.
func NewCNYQuoteClient(c config) *CNYQuoteClient {
	return &CNYQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cnyquote.Hooks(f(g(h())))`.
func (c *CNYQuoteClient) Use(hooks ...Hook) {
	c.hooks.CNYQuote = append(c.hooks.CNYQuote, hooks...)
}

// Create returns a create builder for CNYQuote.
func (c *CNYQuoteClient) Create() *CNYQuoteCreate {
	mutation := newCNYQuoteMutation(c.config, OpCreate)
	return &CNYQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CNYQuote entities.
func (c *CNYQuoteClient) CreateBulk(builders ...*CNYQuoteCreate) *CNYQuoteCreateBulk {
	return &CNYQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CNYQuote.
func (c *CNYQuoteClient) Update() *CNYQuoteUpdate {
	mutation := newCNYQuoteMutation(c.config, OpUpdate)
	return &CNYQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CNYQuoteClient) UpdateOne(cq *CNYQuote) *CNYQuoteUpdateOne {
	mutation := newCNYQuoteMutation(c.config, OpUpdateOne, withCNYQuote(cq))
	return &CNYQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CNYQuoteClient) UpdateOneID(id int) *CNYQuoteUpdateOne {
	mutation := newCNYQuoteMutation(c.config, OpUpdateOne, withCNYQuoteID(id))
	return &CNYQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CNYQuote.
func (c *CNYQuoteClient) Delete() *CNYQuoteDelete {
	mutation := newCNYQuoteMutation(c.config, OpDelete)
	return &CNYQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CNYQuoteClient) DeleteOne(cq *CNYQuote) *CNYQuoteDeleteOne {
	return c.DeleteOneID(cq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CNYQuoteClient) DeleteOneID(id int) *CNYQuoteDeleteOne {
	builder := c.Delete().Where(cnyquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CNYQuoteDeleteOne{builder}
}

// Query returns a query builder for CNYQuote.
func (c *CNYQuoteClient) Query() *CNYQuoteQuery {
	return &CNYQuoteQuery{
		config: c.config,
	}
}

// Get returns a CNYQuote entity by its id.
func (c *CNYQuoteClient) Get(ctx context.Context, id int) (*CNYQuote, error) {
	return c.Query().Where(cnyquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CNYQuoteClient) GetX(ctx context.Context, id int) *CNYQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CNYQuoteClient) Hooks() []Hook {
	return c.hooks.CNYQuote
}

// CZKQuoteClient is a client for the CZKQuote schema.
type CZKQuoteClient struct {
	config
}

// NewCZKQuoteClient returns a client for the CZKQuote from the given config.
func NewCZKQuoteClient(c config) *CZKQuoteClient {
	return &CZKQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `czkquote.Hooks(f(g(h())))`.
func (c *CZKQuoteClient) Use(hooks ...Hook) {
	c.hooks.CZKQuote = append(c.hooks.CZKQuote, hooks...)
}

// Create returns a create builder for CZKQuote.
func (c *CZKQuoteClient) Create() *CZKQuoteCreate {
	mutation := newCZKQuoteMutation(c.config, OpCreate)
	return &CZKQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CZKQuote entities.
func (c *CZKQuoteClient) CreateBulk(builders ...*CZKQuoteCreate) *CZKQuoteCreateBulk {
	return &CZKQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CZKQuote.
func (c *CZKQuoteClient) Update() *CZKQuoteUpdate {
	mutation := newCZKQuoteMutation(c.config, OpUpdate)
	return &CZKQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CZKQuoteClient) UpdateOne(cq *CZKQuote) *CZKQuoteUpdateOne {
	mutation := newCZKQuoteMutation(c.config, OpUpdateOne, withCZKQuote(cq))
	return &CZKQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CZKQuoteClient) UpdateOneID(id int) *CZKQuoteUpdateOne {
	mutation := newCZKQuoteMutation(c.config, OpUpdateOne, withCZKQuoteID(id))
	return &CZKQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CZKQuote.
func (c *CZKQuoteClient) Delete() *CZKQuoteDelete {
	mutation := newCZKQuoteMutation(c.config, OpDelete)
	return &CZKQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CZKQuoteClient) DeleteOne(cq *CZKQuote) *CZKQuoteDeleteOne {
	return c.DeleteOneID(cq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CZKQuoteClient) DeleteOneID(id int) *CZKQuoteDeleteOne {
	builder := c.Delete().Where(czkquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CZKQuoteDeleteOne{builder}
}

// Query returns a query builder for CZKQuote.
func (c *CZKQuoteClient) Query() *CZKQuoteQuery {
	return &CZKQuoteQuery{
		config: c.config,
	}
}

// Get returns a CZKQuote entity by its id.
func (c *CZKQuoteClient) Get(ctx context.Context, id int) (*CZKQuote, error) {
	return c.Query().Where(czkquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CZKQuoteClient) GetX(ctx context.Context, id int) *CZKQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CZKQuoteClient) Hooks() []Hook {
	return c.hooks.CZKQuote
}

// EUROQuoteClient is a client for the EUROQuote schema.
type EUROQuoteClient struct {
	config
}

// NewEUROQuoteClient returns a client for the EUROQuote from the given config.
func NewEUROQuoteClient(c config) *EUROQuoteClient {
	return &EUROQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `euroquote.Hooks(f(g(h())))`.
func (c *EUROQuoteClient) Use(hooks ...Hook) {
	c.hooks.EUROQuote = append(c.hooks.EUROQuote, hooks...)
}

// Create returns a create builder for EUROQuote.
func (c *EUROQuoteClient) Create() *EUROQuoteCreate {
	mutation := newEUROQuoteMutation(c.config, OpCreate)
	return &EUROQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EUROQuote entities.
func (c *EUROQuoteClient) CreateBulk(builders ...*EUROQuoteCreate) *EUROQuoteCreateBulk {
	return &EUROQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EUROQuote.
func (c *EUROQuoteClient) Update() *EUROQuoteUpdate {
	mutation := newEUROQuoteMutation(c.config, OpUpdate)
	return &EUROQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EUROQuoteClient) UpdateOne(eq *EUROQuote) *EUROQuoteUpdateOne {
	mutation := newEUROQuoteMutation(c.config, OpUpdateOne, withEUROQuote(eq))
	return &EUROQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EUROQuoteClient) UpdateOneID(id int) *EUROQuoteUpdateOne {
	mutation := newEUROQuoteMutation(c.config, OpUpdateOne, withEUROQuoteID(id))
	return &EUROQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EUROQuote.
func (c *EUROQuoteClient) Delete() *EUROQuoteDelete {
	mutation := newEUROQuoteMutation(c.config, OpDelete)
	return &EUROQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EUROQuoteClient) DeleteOne(eq *EUROQuote) *EUROQuoteDeleteOne {
	return c.DeleteOneID(eq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EUROQuoteClient) DeleteOneID(id int) *EUROQuoteDeleteOne {
	builder := c.Delete().Where(euroquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EUROQuoteDeleteOne{builder}
}

// Query returns a query builder for EUROQuote.
func (c *EUROQuoteClient) Query() *EUROQuoteQuery {
	return &EUROQuoteQuery{
		config: c.config,
	}
}

// Get returns a EUROQuote entity by its id.
func (c *EUROQuoteClient) Get(ctx context.Context, id int) (*EUROQuote, error) {
	return c.Query().Where(euroquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EUROQuoteClient) GetX(ctx context.Context, id int) *EUROQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EUROQuoteClient) Hooks() []Hook {
	return c.hooks.EUROQuote
}

// GBPQuoteClient is a client for the GBPQuote schema.
type GBPQuoteClient struct {
	config
}

// NewGBPQuoteClient returns a client for the GBPQuote from the given config.
func NewGBPQuoteClient(c config) *GBPQuoteClient {
	return &GBPQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gbpquote.Hooks(f(g(h())))`.
func (c *GBPQuoteClient) Use(hooks ...Hook) {
	c.hooks.GBPQuote = append(c.hooks.GBPQuote, hooks...)
}

// Create returns a create builder for GBPQuote.
func (c *GBPQuoteClient) Create() *GBPQuoteCreate {
	mutation := newGBPQuoteMutation(c.config, OpCreate)
	return &GBPQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GBPQuote entities.
func (c *GBPQuoteClient) CreateBulk(builders ...*GBPQuoteCreate) *GBPQuoteCreateBulk {
	return &GBPQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GBPQuote.
func (c *GBPQuoteClient) Update() *GBPQuoteUpdate {
	mutation := newGBPQuoteMutation(c.config, OpUpdate)
	return &GBPQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GBPQuoteClient) UpdateOne(gq *GBPQuote) *GBPQuoteUpdateOne {
	mutation := newGBPQuoteMutation(c.config, OpUpdateOne, withGBPQuote(gq))
	return &GBPQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GBPQuoteClient) UpdateOneID(id int) *GBPQuoteUpdateOne {
	mutation := newGBPQuoteMutation(c.config, OpUpdateOne, withGBPQuoteID(id))
	return &GBPQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GBPQuote.
func (c *GBPQuoteClient) Delete() *GBPQuoteDelete {
	mutation := newGBPQuoteMutation(c.config, OpDelete)
	return &GBPQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GBPQuoteClient) DeleteOne(gq *GBPQuote) *GBPQuoteDeleteOne {
	return c.DeleteOneID(gq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GBPQuoteClient) DeleteOneID(id int) *GBPQuoteDeleteOne {
	builder := c.Delete().Where(gbpquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GBPQuoteDeleteOne{builder}
}

// Query returns a query builder for GBPQuote.
func (c *GBPQuoteClient) Query() *GBPQuoteQuery {
	return &GBPQuoteQuery{
		config: c.config,
	}
}

// Get returns a GBPQuote entity by its id.
func (c *GBPQuoteClient) Get(ctx context.Context, id int) (*GBPQuote, error) {
	return c.Query().Where(gbpquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GBPQuoteClient) GetX(ctx context.Context, id int) *GBPQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GBPQuoteClient) Hooks() []Hook {
	return c.hooks.GBPQuote
}

// HKDQuoteClient is a client for the HKDQuote schema.
type HKDQuoteClient struct {
	config
}

// NewHKDQuoteClient returns a client for the HKDQuote from the given config.
func NewHKDQuoteClient(c config) *HKDQuoteClient {
	return &HKDQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hkdquote.Hooks(f(g(h())))`.
func (c *HKDQuoteClient) Use(hooks ...Hook) {
	c.hooks.HKDQuote = append(c.hooks.HKDQuote, hooks...)
}

// Create returns a create builder for HKDQuote.
func (c *HKDQuoteClient) Create() *HKDQuoteCreate {
	mutation := newHKDQuoteMutation(c.config, OpCreate)
	return &HKDQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HKDQuote entities.
func (c *HKDQuoteClient) CreateBulk(builders ...*HKDQuoteCreate) *HKDQuoteCreateBulk {
	return &HKDQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HKDQuote.
func (c *HKDQuoteClient) Update() *HKDQuoteUpdate {
	mutation := newHKDQuoteMutation(c.config, OpUpdate)
	return &HKDQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HKDQuoteClient) UpdateOne(hq *HKDQuote) *HKDQuoteUpdateOne {
	mutation := newHKDQuoteMutation(c.config, OpUpdateOne, withHKDQuote(hq))
	return &HKDQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HKDQuoteClient) UpdateOneID(id int) *HKDQuoteUpdateOne {
	mutation := newHKDQuoteMutation(c.config, OpUpdateOne, withHKDQuoteID(id))
	return &HKDQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HKDQuote.
func (c *HKDQuoteClient) Delete() *HKDQuoteDelete {
	mutation := newHKDQuoteMutation(c.config, OpDelete)
	return &HKDQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HKDQuoteClient) DeleteOne(hq *HKDQuote) *HKDQuoteDeleteOne {
	return c.DeleteOneID(hq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HKDQuoteClient) DeleteOneID(id int) *HKDQuoteDeleteOne {
	builder := c.Delete().Where(hkdquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HKDQuoteDeleteOne{builder}
}

// Query returns a query builder for HKDQuote.
func (c *HKDQuoteClient) Query() *HKDQuoteQuery {
	return &HKDQuoteQuery{
		config: c.config,
	}
}

// Get returns a HKDQuote entity by its id.
func (c *HKDQuoteClient) Get(ctx context.Context, id int) (*HKDQuote, error) {
	return c.Query().Where(hkdquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HKDQuoteClient) GetX(ctx context.Context, id int) *HKDQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *HKDQuoteClient) Hooks() []Hook {
	return c.hooks.HKDQuote
}

// HUFQuoteClient is a client for the HUFQuote schema.
type HUFQuoteClient struct {
	config
}

// NewHUFQuoteClient returns a client for the HUFQuote from the given config.
func NewHUFQuoteClient(c config) *HUFQuoteClient {
	return &HUFQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hufquote.Hooks(f(g(h())))`.
func (c *HUFQuoteClient) Use(hooks ...Hook) {
	c.hooks.HUFQuote = append(c.hooks.HUFQuote, hooks...)
}

// Create returns a create builder for HUFQuote.
func (c *HUFQuoteClient) Create() *HUFQuoteCreate {
	mutation := newHUFQuoteMutation(c.config, OpCreate)
	return &HUFQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HUFQuote entities.
func (c *HUFQuoteClient) CreateBulk(builders ...*HUFQuoteCreate) *HUFQuoteCreateBulk {
	return &HUFQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HUFQuote.
func (c *HUFQuoteClient) Update() *HUFQuoteUpdate {
	mutation := newHUFQuoteMutation(c.config, OpUpdate)
	return &HUFQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HUFQuoteClient) UpdateOne(hq *HUFQuote) *HUFQuoteUpdateOne {
	mutation := newHUFQuoteMutation(c.config, OpUpdateOne, withHUFQuote(hq))
	return &HUFQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HUFQuoteClient) UpdateOneID(id int) *HUFQuoteUpdateOne {
	mutation := newHUFQuoteMutation(c.config, OpUpdateOne, withHUFQuoteID(id))
	return &HUFQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HUFQuote.
func (c *HUFQuoteClient) Delete() *HUFQuoteDelete {
	mutation := newHUFQuoteMutation(c.config, OpDelete)
	return &HUFQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HUFQuoteClient) DeleteOne(hq *HUFQuote) *HUFQuoteDeleteOne {
	return c.DeleteOneID(hq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HUFQuoteClient) DeleteOneID(id int) *HUFQuoteDeleteOne {
	builder := c.Delete().Where(hufquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HUFQuoteDeleteOne{builder}
}

// Query returns a query builder for HUFQuote.
func (c *HUFQuoteClient) Query() *HUFQuoteQuery {
	return &HUFQuoteQuery{
		config: c.config,
	}
}

// Get returns a HUFQuote entity by its id.
func (c *HUFQuoteClient) Get(ctx context.Context, id int) (*HUFQuote, error) {
	return c.Query().Where(hufquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HUFQuoteClient) GetX(ctx context.Context, id int) *HUFQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *HUFQuoteClient) Hooks() []Hook {
	return c.hooks.HUFQuote
}

// INRQuoteClient is a client for the INRQuote schema.
type INRQuoteClient struct {
	config
}

// NewINRQuoteClient returns a client for the INRQuote from the given config.
func NewINRQuoteClient(c config) *INRQuoteClient {
	return &INRQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inrquote.Hooks(f(g(h())))`.
func (c *INRQuoteClient) Use(hooks ...Hook) {
	c.hooks.INRQuote = append(c.hooks.INRQuote, hooks...)
}

// Create returns a create builder for INRQuote.
func (c *INRQuoteClient) Create() *INRQuoteCreate {
	mutation := newINRQuoteMutation(c.config, OpCreate)
	return &INRQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of INRQuote entities.
func (c *INRQuoteClient) CreateBulk(builders ...*INRQuoteCreate) *INRQuoteCreateBulk {
	return &INRQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for INRQuote.
func (c *INRQuoteClient) Update() *INRQuoteUpdate {
	mutation := newINRQuoteMutation(c.config, OpUpdate)
	return &INRQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *INRQuoteClient) UpdateOne(iq *INRQuote) *INRQuoteUpdateOne {
	mutation := newINRQuoteMutation(c.config, OpUpdateOne, withINRQuote(iq))
	return &INRQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *INRQuoteClient) UpdateOneID(id int) *INRQuoteUpdateOne {
	mutation := newINRQuoteMutation(c.config, OpUpdateOne, withINRQuoteID(id))
	return &INRQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for INRQuote.
func (c *INRQuoteClient) Delete() *INRQuoteDelete {
	mutation := newINRQuoteMutation(c.config, OpDelete)
	return &INRQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *INRQuoteClient) DeleteOne(iq *INRQuote) *INRQuoteDeleteOne {
	return c.DeleteOneID(iq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *INRQuoteClient) DeleteOneID(id int) *INRQuoteDeleteOne {
	builder := c.Delete().Where(inrquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &INRQuoteDeleteOne{builder}
}

// Query returns a query builder for INRQuote.
func (c *INRQuoteClient) Query() *INRQuoteQuery {
	return &INRQuoteQuery{
		config: c.config,
	}
}

// Get returns a INRQuote entity by its id.
func (c *INRQuoteClient) Get(ctx context.Context, id int) (*INRQuote, error) {
	return c.Query().Where(inrquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *INRQuoteClient) GetX(ctx context.Context, id int) *INRQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *INRQuoteClient) Hooks() []Hook {
	return c.hooks.INRQuote
}

// NOKQuoteClient is a client for the NOKQuote schema.
type NOKQuoteClient struct {
	config
}

// NewNOKQuoteClient returns a client for the NOKQuote from the given config.
func NewNOKQuoteClient(c config) *NOKQuoteClient {
	return &NOKQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nokquote.Hooks(f(g(h())))`.
func (c *NOKQuoteClient) Use(hooks ...Hook) {
	c.hooks.NOKQuote = append(c.hooks.NOKQuote, hooks...)
}

// Create returns a create builder for NOKQuote.
func (c *NOKQuoteClient) Create() *NOKQuoteCreate {
	mutation := newNOKQuoteMutation(c.config, OpCreate)
	return &NOKQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NOKQuote entities.
func (c *NOKQuoteClient) CreateBulk(builders ...*NOKQuoteCreate) *NOKQuoteCreateBulk {
	return &NOKQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NOKQuote.
func (c *NOKQuoteClient) Update() *NOKQuoteUpdate {
	mutation := newNOKQuoteMutation(c.config, OpUpdate)
	return &NOKQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NOKQuoteClient) UpdateOne(nq *NOKQuote) *NOKQuoteUpdateOne {
	mutation := newNOKQuoteMutation(c.config, OpUpdateOne, withNOKQuote(nq))
	return &NOKQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NOKQuoteClient) UpdateOneID(id int) *NOKQuoteUpdateOne {
	mutation := newNOKQuoteMutation(c.config, OpUpdateOne, withNOKQuoteID(id))
	return &NOKQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NOKQuote.
func (c *NOKQuoteClient) Delete() *NOKQuoteDelete {
	mutation := newNOKQuoteMutation(c.config, OpDelete)
	return &NOKQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NOKQuoteClient) DeleteOne(nq *NOKQuote) *NOKQuoteDeleteOne {
	return c.DeleteOneID(nq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NOKQuoteClient) DeleteOneID(id int) *NOKQuoteDeleteOne {
	builder := c.Delete().Where(nokquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NOKQuoteDeleteOne{builder}
}

// Query returns a query builder for NOKQuote.
func (c *NOKQuoteClient) Query() *NOKQuoteQuery {
	return &NOKQuoteQuery{
		config: c.config,
	}
}

// Get returns a NOKQuote entity by its id.
func (c *NOKQuoteClient) Get(ctx context.Context, id int) (*NOKQuote, error) {
	return c.Query().Where(nokquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NOKQuoteClient) GetX(ctx context.Context, id int) *NOKQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NOKQuoteClient) Hooks() []Hook {
	return c.hooks.NOKQuote
}

// NZDQuoteClient is a client for the NZDQuote schema.
type NZDQuoteClient struct {
	config
}

// NewNZDQuoteClient returns a client for the NZDQuote from the given config.
func NewNZDQuoteClient(c config) *NZDQuoteClient {
	return &NZDQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nzdquote.Hooks(f(g(h())))`.
func (c *NZDQuoteClient) Use(hooks ...Hook) {
	c.hooks.NZDQuote = append(c.hooks.NZDQuote, hooks...)
}

// Create returns a create builder for NZDQuote.
func (c *NZDQuoteClient) Create() *NZDQuoteCreate {
	mutation := newNZDQuoteMutation(c.config, OpCreate)
	return &NZDQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NZDQuote entities.
func (c *NZDQuoteClient) CreateBulk(builders ...*NZDQuoteCreate) *NZDQuoteCreateBulk {
	return &NZDQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NZDQuote.
func (c *NZDQuoteClient) Update() *NZDQuoteUpdate {
	mutation := newNZDQuoteMutation(c.config, OpUpdate)
	return &NZDQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NZDQuoteClient) UpdateOne(nq *NZDQuote) *NZDQuoteUpdateOne {
	mutation := newNZDQuoteMutation(c.config, OpUpdateOne, withNZDQuote(nq))
	return &NZDQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NZDQuoteClient) UpdateOneID(id int) *NZDQuoteUpdateOne {
	mutation := newNZDQuoteMutation(c.config, OpUpdateOne, withNZDQuoteID(id))
	return &NZDQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NZDQuote.
func (c *NZDQuoteClient) Delete() *NZDQuoteDelete {
	mutation := newNZDQuoteMutation(c.config, OpDelete)
	return &NZDQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NZDQuoteClient) DeleteOne(nq *NZDQuote) *NZDQuoteDeleteOne {
	return c.DeleteOneID(nq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NZDQuoteClient) DeleteOneID(id int) *NZDQuoteDeleteOne {
	builder := c.Delete().Where(nzdquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NZDQuoteDeleteOne{builder}
}

// Query returns a query builder for NZDQuote.
func (c *NZDQuoteClient) Query() *NZDQuoteQuery {
	return &NZDQuoteQuery{
		config: c.config,
	}
}

// Get returns a NZDQuote entity by its id.
func (c *NZDQuoteClient) Get(ctx context.Context, id int) (*NZDQuote, error) {
	return c.Query().Where(nzdquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NZDQuoteClient) GetX(ctx context.Context, id int) *NZDQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NZDQuoteClient) Hooks() []Hook {
	return c.hooks.NZDQuote
}

// PKRQuoteClient is a client for the PKRQuote schema.
type PKRQuoteClient struct {
	config
}

// NewPKRQuoteClient returns a client for the PKRQuote from the given config.
func NewPKRQuoteClient(c config) *PKRQuoteClient {
	return &PKRQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pkrquote.Hooks(f(g(h())))`.
func (c *PKRQuoteClient) Use(hooks ...Hook) {
	c.hooks.PKRQuote = append(c.hooks.PKRQuote, hooks...)
}

// Create returns a create builder for PKRQuote.
func (c *PKRQuoteClient) Create() *PKRQuoteCreate {
	mutation := newPKRQuoteMutation(c.config, OpCreate)
	return &PKRQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PKRQuote entities.
func (c *PKRQuoteClient) CreateBulk(builders ...*PKRQuoteCreate) *PKRQuoteCreateBulk {
	return &PKRQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PKRQuote.
func (c *PKRQuoteClient) Update() *PKRQuoteUpdate {
	mutation := newPKRQuoteMutation(c.config, OpUpdate)
	return &PKRQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PKRQuoteClient) UpdateOne(pq *PKRQuote) *PKRQuoteUpdateOne {
	mutation := newPKRQuoteMutation(c.config, OpUpdateOne, withPKRQuote(pq))
	return &PKRQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PKRQuoteClient) UpdateOneID(id int) *PKRQuoteUpdateOne {
	mutation := newPKRQuoteMutation(c.config, OpUpdateOne, withPKRQuoteID(id))
	return &PKRQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PKRQuote.
func (c *PKRQuoteClient) Delete() *PKRQuoteDelete {
	mutation := newPKRQuoteMutation(c.config, OpDelete)
	return &PKRQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PKRQuoteClient) DeleteOne(pq *PKRQuote) *PKRQuoteDeleteOne {
	return c.DeleteOneID(pq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PKRQuoteClient) DeleteOneID(id int) *PKRQuoteDeleteOne {
	builder := c.Delete().Where(pkrquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PKRQuoteDeleteOne{builder}
}

// Query returns a query builder for PKRQuote.
func (c *PKRQuoteClient) Query() *PKRQuoteQuery {
	return &PKRQuoteQuery{
		config: c.config,
	}
}

// Get returns a PKRQuote entity by its id.
func (c *PKRQuoteClient) Get(ctx context.Context, id int) (*PKRQuote, error) {
	return c.Query().Where(pkrquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PKRQuoteClient) GetX(ctx context.Context, id int) *PKRQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PKRQuoteClient) Hooks() []Hook {
	return c.hooks.PKRQuote
}

// PLNQuoteClient is a client for the PLNQuote schema.
type PLNQuoteClient struct {
	config
}

// NewPLNQuoteClient returns a client for the PLNQuote from the given config.
func NewPLNQuoteClient(c config) *PLNQuoteClient {
	return &PLNQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `plnquote.Hooks(f(g(h())))`.
func (c *PLNQuoteClient) Use(hooks ...Hook) {
	c.hooks.PLNQuote = append(c.hooks.PLNQuote, hooks...)
}

// Create returns a create builder for PLNQuote.
func (c *PLNQuoteClient) Create() *PLNQuoteCreate {
	mutation := newPLNQuoteMutation(c.config, OpCreate)
	return &PLNQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PLNQuote entities.
func (c *PLNQuoteClient) CreateBulk(builders ...*PLNQuoteCreate) *PLNQuoteCreateBulk {
	return &PLNQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PLNQuote.
func (c *PLNQuoteClient) Update() *PLNQuoteUpdate {
	mutation := newPLNQuoteMutation(c.config, OpUpdate)
	return &PLNQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PLNQuoteClient) UpdateOne(pq *PLNQuote) *PLNQuoteUpdateOne {
	mutation := newPLNQuoteMutation(c.config, OpUpdateOne, withPLNQuote(pq))
	return &PLNQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PLNQuoteClient) UpdateOneID(id int) *PLNQuoteUpdateOne {
	mutation := newPLNQuoteMutation(c.config, OpUpdateOne, withPLNQuoteID(id))
	return &PLNQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PLNQuote.
func (c *PLNQuoteClient) Delete() *PLNQuoteDelete {
	mutation := newPLNQuoteMutation(c.config, OpDelete)
	return &PLNQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PLNQuoteClient) DeleteOne(pq *PLNQuote) *PLNQuoteDeleteOne {
	return c.DeleteOneID(pq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PLNQuoteClient) DeleteOneID(id int) *PLNQuoteDeleteOne {
	builder := c.Delete().Where(plnquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PLNQuoteDeleteOne{builder}
}

// Query returns a query builder for PLNQuote.
func (c *PLNQuoteClient) Query() *PLNQuoteQuery {
	return &PLNQuoteQuery{
		config: c.config,
	}
}

// Get returns a PLNQuote entity by its id.
func (c *PLNQuoteClient) Get(ctx context.Context, id int) (*PLNQuote, error) {
	return c.Query().Where(plnquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PLNQuoteClient) GetX(ctx context.Context, id int) *PLNQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PLNQuoteClient) Hooks() []Hook {
	return c.hooks.PLNQuote
}

// RUBQuoteClient is a client for the RUBQuote schema.
type RUBQuoteClient struct {
	config
}

// NewRUBQuoteClient returns a client for the RUBQuote from the given config.
func NewRUBQuoteClient(c config) *RUBQuoteClient {
	return &RUBQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rubquote.Hooks(f(g(h())))`.
func (c *RUBQuoteClient) Use(hooks ...Hook) {
	c.hooks.RUBQuote = append(c.hooks.RUBQuote, hooks...)
}

// Create returns a create builder for RUBQuote.
func (c *RUBQuoteClient) Create() *RUBQuoteCreate {
	mutation := newRUBQuoteMutation(c.config, OpCreate)
	return &RUBQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RUBQuote entities.
func (c *RUBQuoteClient) CreateBulk(builders ...*RUBQuoteCreate) *RUBQuoteCreateBulk {
	return &RUBQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RUBQuote.
func (c *RUBQuoteClient) Update() *RUBQuoteUpdate {
	mutation := newRUBQuoteMutation(c.config, OpUpdate)
	return &RUBQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RUBQuoteClient) UpdateOne(rq *RUBQuote) *RUBQuoteUpdateOne {
	mutation := newRUBQuoteMutation(c.config, OpUpdateOne, withRUBQuote(rq))
	return &RUBQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RUBQuoteClient) UpdateOneID(id int) *RUBQuoteUpdateOne {
	mutation := newRUBQuoteMutation(c.config, OpUpdateOne, withRUBQuoteID(id))
	return &RUBQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RUBQuote.
func (c *RUBQuoteClient) Delete() *RUBQuoteDelete {
	mutation := newRUBQuoteMutation(c.config, OpDelete)
	return &RUBQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RUBQuoteClient) DeleteOne(rq *RUBQuote) *RUBQuoteDeleteOne {
	return c.DeleteOneID(rq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RUBQuoteClient) DeleteOneID(id int) *RUBQuoteDeleteOne {
	builder := c.Delete().Where(rubquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RUBQuoteDeleteOne{builder}
}

// Query returns a query builder for RUBQuote.
func (c *RUBQuoteClient) Query() *RUBQuoteQuery {
	return &RUBQuoteQuery{
		config: c.config,
	}
}

// Get returns a RUBQuote entity by its id.
func (c *RUBQuoteClient) Get(ctx context.Context, id int) (*RUBQuote, error) {
	return c.Query().Where(rubquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RUBQuoteClient) GetX(ctx context.Context, id int) *RUBQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RUBQuoteClient) Hooks() []Hook {
	return c.hooks.RUBQuote
}

// SEKQuoteClient is a client for the SEKQuote schema.
type SEKQuoteClient struct {
	config
}

// NewSEKQuoteClient returns a client for the SEKQuote from the given config.
func NewSEKQuoteClient(c config) *SEKQuoteClient {
	return &SEKQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sekquote.Hooks(f(g(h())))`.
func (c *SEKQuoteClient) Use(hooks ...Hook) {
	c.hooks.SEKQuote = append(c.hooks.SEKQuote, hooks...)
}

// Create returns a create builder for SEKQuote.
func (c *SEKQuoteClient) Create() *SEKQuoteCreate {
	mutation := newSEKQuoteMutation(c.config, OpCreate)
	return &SEKQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SEKQuote entities.
func (c *SEKQuoteClient) CreateBulk(builders ...*SEKQuoteCreate) *SEKQuoteCreateBulk {
	return &SEKQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SEKQuote.
func (c *SEKQuoteClient) Update() *SEKQuoteUpdate {
	mutation := newSEKQuoteMutation(c.config, OpUpdate)
	return &SEKQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SEKQuoteClient) UpdateOne(sq *SEKQuote) *SEKQuoteUpdateOne {
	mutation := newSEKQuoteMutation(c.config, OpUpdateOne, withSEKQuote(sq))
	return &SEKQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SEKQuoteClient) UpdateOneID(id int) *SEKQuoteUpdateOne {
	mutation := newSEKQuoteMutation(c.config, OpUpdateOne, withSEKQuoteID(id))
	return &SEKQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SEKQuote.
func (c *SEKQuoteClient) Delete() *SEKQuoteDelete {
	mutation := newSEKQuoteMutation(c.config, OpDelete)
	return &SEKQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SEKQuoteClient) DeleteOne(sq *SEKQuote) *SEKQuoteDeleteOne {
	return c.DeleteOneID(sq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SEKQuoteClient) DeleteOneID(id int) *SEKQuoteDeleteOne {
	builder := c.Delete().Where(sekquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SEKQuoteDeleteOne{builder}
}

// Query returns a query builder for SEKQuote.
func (c *SEKQuoteClient) Query() *SEKQuoteQuery {
	return &SEKQuoteQuery{
		config: c.config,
	}
}

// Get returns a SEKQuote entity by its id.
func (c *SEKQuoteClient) Get(ctx context.Context, id int) (*SEKQuote, error) {
	return c.Query().Where(sekquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SEKQuoteClient) GetX(ctx context.Context, id int) *SEKQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SEKQuoteClient) Hooks() []Hook {
	return c.hooks.SEKQuote
}

// TWDQuoteClient is a client for the TWDQuote schema.
type TWDQuoteClient struct {
	config
}

// NewTWDQuoteClient returns a client for the TWDQuote from the given config.
func NewTWDQuoteClient(c config) *TWDQuoteClient {
	return &TWDQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `twdquote.Hooks(f(g(h())))`.
func (c *TWDQuoteClient) Use(hooks ...Hook) {
	c.hooks.TWDQuote = append(c.hooks.TWDQuote, hooks...)
}

// Create returns a create builder for TWDQuote.
func (c *TWDQuoteClient) Create() *TWDQuoteCreate {
	mutation := newTWDQuoteMutation(c.config, OpCreate)
	return &TWDQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TWDQuote entities.
func (c *TWDQuoteClient) CreateBulk(builders ...*TWDQuoteCreate) *TWDQuoteCreateBulk {
	return &TWDQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TWDQuote.
func (c *TWDQuoteClient) Update() *TWDQuoteUpdate {
	mutation := newTWDQuoteMutation(c.config, OpUpdate)
	return &TWDQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TWDQuoteClient) UpdateOne(tq *TWDQuote) *TWDQuoteUpdateOne {
	mutation := newTWDQuoteMutation(c.config, OpUpdateOne, withTWDQuote(tq))
	return &TWDQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TWDQuoteClient) UpdateOneID(id int) *TWDQuoteUpdateOne {
	mutation := newTWDQuoteMutation(c.config, OpUpdateOne, withTWDQuoteID(id))
	return &TWDQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TWDQuote.
func (c *TWDQuoteClient) Delete() *TWDQuoteDelete {
	mutation := newTWDQuoteMutation(c.config, OpDelete)
	return &TWDQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TWDQuoteClient) DeleteOne(tq *TWDQuote) *TWDQuoteDeleteOne {
	return c.DeleteOneID(tq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TWDQuoteClient) DeleteOneID(id int) *TWDQuoteDeleteOne {
	builder := c.Delete().Where(twdquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TWDQuoteDeleteOne{builder}
}

// Query returns a query builder for TWDQuote.
func (c *TWDQuoteClient) Query() *TWDQuoteQuery {
	return &TWDQuoteQuery{
		config: c.config,
	}
}

// Get returns a TWDQuote entity by its id.
func (c *TWDQuoteClient) Get(ctx context.Context, id int) (*TWDQuote, error) {
	return c.Query().Where(twdquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TWDQuoteClient) GetX(ctx context.Context, id int) *TWDQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TWDQuoteClient) Hooks() []Hook {
	return c.hooks.TWDQuote
}

// UAHQuoteClient is a client for the UAHQuote schema.
type UAHQuoteClient struct {
	config
}

// NewUAHQuoteClient returns a client for the UAHQuote from the given config.
func NewUAHQuoteClient(c config) *UAHQuoteClient {
	return &UAHQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uahquote.Hooks(f(g(h())))`.
func (c *UAHQuoteClient) Use(hooks ...Hook) {
	c.hooks.UAHQuote = append(c.hooks.UAHQuote, hooks...)
}

// Create returns a create builder for UAHQuote.
func (c *UAHQuoteClient) Create() *UAHQuoteCreate {
	mutation := newUAHQuoteMutation(c.config, OpCreate)
	return &UAHQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UAHQuote entities.
func (c *UAHQuoteClient) CreateBulk(builders ...*UAHQuoteCreate) *UAHQuoteCreateBulk {
	return &UAHQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UAHQuote.
func (c *UAHQuoteClient) Update() *UAHQuoteUpdate {
	mutation := newUAHQuoteMutation(c.config, OpUpdate)
	return &UAHQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UAHQuoteClient) UpdateOne(uq *UAHQuote) *UAHQuoteUpdateOne {
	mutation := newUAHQuoteMutation(c.config, OpUpdateOne, withUAHQuote(uq))
	return &UAHQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UAHQuoteClient) UpdateOneID(id int) *UAHQuoteUpdateOne {
	mutation := newUAHQuoteMutation(c.config, OpUpdateOne, withUAHQuoteID(id))
	return &UAHQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UAHQuote.
func (c *UAHQuoteClient) Delete() *UAHQuoteDelete {
	mutation := newUAHQuoteMutation(c.config, OpDelete)
	return &UAHQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UAHQuoteClient) DeleteOne(uq *UAHQuote) *UAHQuoteDeleteOne {
	return c.DeleteOneID(uq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UAHQuoteClient) DeleteOneID(id int) *UAHQuoteDeleteOne {
	builder := c.Delete().Where(uahquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UAHQuoteDeleteOne{builder}
}

// Query returns a query builder for UAHQuote.
func (c *UAHQuoteClient) Query() *UAHQuoteQuery {
	return &UAHQuoteQuery{
		config: c.config,
	}
}

// Get returns a UAHQuote entity by its id.
func (c *UAHQuoteClient) Get(ctx context.Context, id int) (*UAHQuote, error) {
	return c.Query().Where(uahquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UAHQuoteClient) GetX(ctx context.Context, id int) *UAHQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UAHQuoteClient) Hooks() []Hook {
	return c.hooks.UAHQuote
}

// USDQuoteClient is a client for the USDQuote schema.
type USDQuoteClient struct {
	config
}

// NewUSDQuoteClient returns a client for the USDQuote from the given config.
func NewUSDQuoteClient(c config) *USDQuoteClient {
	return &USDQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usdquote.Hooks(f(g(h())))`.
func (c *USDQuoteClient) Use(hooks ...Hook) {
	c.hooks.USDQuote = append(c.hooks.USDQuote, hooks...)
}

// Create returns a create builder for USDQuote.
func (c *USDQuoteClient) Create() *USDQuoteCreate {
	mutation := newUSDQuoteMutation(c.config, OpCreate)
	return &USDQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of USDQuote entities.
func (c *USDQuoteClient) CreateBulk(builders ...*USDQuoteCreate) *USDQuoteCreateBulk {
	return &USDQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for USDQuote.
func (c *USDQuoteClient) Update() *USDQuoteUpdate {
	mutation := newUSDQuoteMutation(c.config, OpUpdate)
	return &USDQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *USDQuoteClient) UpdateOne(uq *USDQuote) *USDQuoteUpdateOne {
	mutation := newUSDQuoteMutation(c.config, OpUpdateOne, withUSDQuote(uq))
	return &USDQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *USDQuoteClient) UpdateOneID(id int) *USDQuoteUpdateOne {
	mutation := newUSDQuoteMutation(c.config, OpUpdateOne, withUSDQuoteID(id))
	return &USDQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for USDQuote.
func (c *USDQuoteClient) Delete() *USDQuoteDelete {
	mutation := newUSDQuoteMutation(c.config, OpDelete)
	return &USDQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *USDQuoteClient) DeleteOne(uq *USDQuote) *USDQuoteDeleteOne {
	return c.DeleteOneID(uq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *USDQuoteClient) DeleteOneID(id int) *USDQuoteDeleteOne {
	builder := c.Delete().Where(usdquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &USDQuoteDeleteOne{builder}
}

// Query returns a query builder for USDQuote.
func (c *USDQuoteClient) Query() *USDQuoteQuery {
	return &USDQuoteQuery{
		config: c.config,
	}
}

// Get returns a USDQuote entity by its id.
func (c *USDQuoteClient) Get(ctx context.Context, id int) (*USDQuote, error) {
	return c.Query().Where(usdquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *USDQuoteClient) GetX(ctx context.Context, id int) *USDQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *USDQuoteClient) Hooks() []Hook {
	return c.hooks.USDQuote
}

// ZARQuoteClient is a client for the ZARQuote schema.
type ZARQuoteClient struct {
	config
}

// NewZARQuoteClient returns a client for the ZARQuote from the given config.
func NewZARQuoteClient(c config) *ZARQuoteClient {
	return &ZARQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `zarquote.Hooks(f(g(h())))`.
func (c *ZARQuoteClient) Use(hooks ...Hook) {
	c.hooks.ZARQuote = append(c.hooks.ZARQuote, hooks...)
}

// Create returns a create builder for ZARQuote.
func (c *ZARQuoteClient) Create() *ZARQuoteCreate {
	mutation := newZARQuoteMutation(c.config, OpCreate)
	return &ZARQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ZARQuote entities.
func (c *ZARQuoteClient) CreateBulk(builders ...*ZARQuoteCreate) *ZARQuoteCreateBulk {
	return &ZARQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ZARQuote.
func (c *ZARQuoteClient) Update() *ZARQuoteUpdate {
	mutation := newZARQuoteMutation(c.config, OpUpdate)
	return &ZARQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ZARQuoteClient) UpdateOne(zq *ZARQuote) *ZARQuoteUpdateOne {
	mutation := newZARQuoteMutation(c.config, OpUpdateOne, withZARQuote(zq))
	return &ZARQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ZARQuoteClient) UpdateOneID(id int) *ZARQuoteUpdateOne {
	mutation := newZARQuoteMutation(c.config, OpUpdateOne, withZARQuoteID(id))
	return &ZARQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ZARQuote.
func (c *ZARQuoteClient) Delete() *ZARQuoteDelete {
	mutation := newZARQuoteMutation(c.config, OpDelete)
	return &ZARQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ZARQuoteClient) DeleteOne(zq *ZARQuote) *ZARQuoteDeleteOne {
	return c.DeleteOneID(zq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ZARQuoteClient) DeleteOneID(id int) *ZARQuoteDeleteOne {
	builder := c.Delete().Where(zarquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ZARQuoteDeleteOne{builder}
}

// Query returns a query builder for ZARQuote.
func (c *ZARQuoteClient) Query() *ZARQuoteQuery {
	return &ZARQuoteQuery{
		config: c.config,
	}
}

// Get returns a ZARQuote entity by its id.
func (c *ZARQuoteClient) Get(ctx context.Context, id int) (*ZARQuote, error) {
	return c.Query().Where(zarquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ZARQuoteClient) GetX(ctx context.Context, id int) *ZARQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ZARQuoteClient) Hooks() []Hook {
	return c.hooks.ZARQuote
}

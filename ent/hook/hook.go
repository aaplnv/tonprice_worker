// Code generated by entc, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"
	"main/ent"
)

// The AUDQuoteFunc type is an adapter to allow the use of ordinary
// function as AUDQuote mutator.
type AUDQuoteFunc func(context.Context, *ent.AUDQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AUDQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AUDQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AUDQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The CHFQuoteFunc type is an adapter to allow the use of ordinary
// function as CHFQuote mutator.
type CHFQuoteFunc func(context.Context, *ent.CHFQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CHFQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CHFQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CHFQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The CNYQuoteFunc type is an adapter to allow the use of ordinary
// function as CNYQuote mutator.
type CNYQuoteFunc func(context.Context, *ent.CNYQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CNYQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CNYQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CNYQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The CZKQuoteFunc type is an adapter to allow the use of ordinary
// function as CZKQuote mutator.
type CZKQuoteFunc func(context.Context, *ent.CZKQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CZKQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CZKQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CZKQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The EUROQuoteFunc type is an adapter to allow the use of ordinary
// function as EUROQuote mutator.
type EUROQuoteFunc func(context.Context, *ent.EUROQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EUROQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EUROQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EUROQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The GBPQuoteFunc type is an adapter to allow the use of ordinary
// function as GBPQuote mutator.
type GBPQuoteFunc func(context.Context, *ent.GBPQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f GBPQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.GBPQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.GBPQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The HKDQuoteFunc type is an adapter to allow the use of ordinary
// function as HKDQuote mutator.
type HKDQuoteFunc func(context.Context, *ent.HKDQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HKDQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.HKDQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HKDQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The HUFQuoteFunc type is an adapter to allow the use of ordinary
// function as HUFQuote mutator.
type HUFQuoteFunc func(context.Context, *ent.HUFQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HUFQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.HUFQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HUFQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The INRQuoteFunc type is an adapter to allow the use of ordinary
// function as INRQuote mutator.
type INRQuoteFunc func(context.Context, *ent.INRQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f INRQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.INRQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.INRQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The NOKQuoteFunc type is an adapter to allow the use of ordinary
// function as NOKQuote mutator.
type NOKQuoteFunc func(context.Context, *ent.NOKQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NOKQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.NOKQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NOKQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The NZDQuoteFunc type is an adapter to allow the use of ordinary
// function as NZDQuote mutator.
type NZDQuoteFunc func(context.Context, *ent.NZDQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NZDQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.NZDQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NZDQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The PKRQuoteFunc type is an adapter to allow the use of ordinary
// function as PKRQuote mutator.
type PKRQuoteFunc func(context.Context, *ent.PKRQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PKRQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PKRQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PKRQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The PLNQuoteFunc type is an adapter to allow the use of ordinary
// function as PLNQuote mutator.
type PLNQuoteFunc func(context.Context, *ent.PLNQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PLNQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PLNQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PLNQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The RUBQuoteFunc type is an adapter to allow the use of ordinary
// function as RUBQuote mutator.
type RUBQuoteFunc func(context.Context, *ent.RUBQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RUBQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RUBQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RUBQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The SEKQuoteFunc type is an adapter to allow the use of ordinary
// function as SEKQuote mutator.
type SEKQuoteFunc func(context.Context, *ent.SEKQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SEKQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SEKQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SEKQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The TWDQuoteFunc type is an adapter to allow the use of ordinary
// function as TWDQuote mutator.
type TWDQuoteFunc func(context.Context, *ent.TWDQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TWDQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TWDQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TWDQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The UAHQuoteFunc type is an adapter to allow the use of ordinary
// function as UAHQuote mutator.
type UAHQuoteFunc func(context.Context, *ent.UAHQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UAHQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UAHQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UAHQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The USDQuoteFunc type is an adapter to allow the use of ordinary
// function as USDQuote mutator.
type USDQuoteFunc func(context.Context, *ent.USDQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f USDQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.USDQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.USDQuoteMutation", m)
	}
	return f(ctx, mv)
}

// The ZARQuoteFunc type is an adapter to allow the use of ordinary
// function as ZARQuote mutator.
type ZARQuoteFunc func(context.Context, *ent.ZARQuoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ZARQuoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ZARQuoteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ZARQuoteMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
//
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
//
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
//
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
